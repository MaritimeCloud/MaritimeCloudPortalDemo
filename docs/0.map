{"version":3,"file":"0.chunk.js","sources":["webpack:///./src/app/backend-api/identity-registry/autogen/model/Organization.ts","webpack:///./src/app/backend-api/identity-registry/autogen/model/Service.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-details/service-details.html","webpack:///./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-list/service-list.html","webpack:///./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-new/service-new.html","webpack:///./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts","webpack:///./src/app/pages/org-identity-registry/services/components/service-update/service-update.html","webpack:///./src/app/pages/org-identity-registry/services/services.component.ts","webpack:///./src/app/pages/org-identity-registry/services/services.module.ts","webpack:///./src/app/pages/org-identity-registry/services/services.routing.ts","webpack:///./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-details/design-details.component.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-details/design-details.html","webpack:///./src/app/pages/org-service-registry/designs/components/design-list/design-list.component.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-list/design-list.html","webpack:///./src/app/pages/org-service-registry/designs/components/design-new/design-new.component.ts","webpack:///./src/app/pages/org-service-registry/designs/components/design-new/design-new.html","webpack:///./src/app/pages/org-service-registry/designs/designs.component.ts","webpack:///./src/app/pages/org-service-registry/designs/designs.module.ts","webpack:///./src/app/pages/org-service-registry/designs/designs.routing.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.component.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.html","webpack:///./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.component.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.html","webpack:///./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.component.ts","webpack:///./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.html","webpack:///./src/app/pages/org-service-registry/instances/instances.component.ts","webpack:///./src/app/pages/org-service-registry/instances/instances.module.ts","webpack:///./src/app/pages/org-service-registry/instances/instances.routing.ts","webpack:///./src/app/pages/org-service-registry/org-service-registry.component.ts","webpack:///./src/app/pages/org-service-registry/org-service-registry.module.ts","webpack:///./src/app/pages/org-service-registry/org-service-registry.routing.ts","webpack:///./src/app/pages/org-service-registry/shared/services/design-xml-parser.service.ts","webpack:///./src/app/pages/org-service-registry/shared/services/instance-xml-parser.service.ts","webpack:///./src/app/pages/org-service-registry/shared/services/service-registry-xml-parser.service.ts","webpack:///./src/app/pages/org-service-registry/shared/services/specification-xml-parser.service.ts","webpack:///./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.html","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.html","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.html","webpack:///./src/app/pages/org-service-registry/specifications/specifications.component.ts","webpack:///./src/app/pages/org-service-registry/specifications/specifications.module.ts","webpack:///./src/app/pages/org-service-registry/specifications/specifications.routing.ts","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.component.ts","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.html","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.module.ts","webpack:///./src/app/pages/org-service-registry/sr-how-to/sr-how-to.routing.ts","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.html","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.scss","webpack:///./src/app/pages/shared/components/designs-table/designs-table.component.ts","webpack:///./src/app/pages/shared/components/designs-table/designs-table.html","webpack:///./src/app/pages/shared/components/instances-table/instances-table.component.ts","webpack:///./src/app/pages/shared/components/instances-table/instances-table.html","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.component.ts","webpack:///./src/app/pages/shared/components/service-details-view/service-details-view.html","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.html","webpack:///./src/app/pages/shared/services/organization-view-model.service.ts","webpack:///./src/app/pages/shared/shared.module.ts","webpack:///./src/app/shared/enums-helper.ts"],"sourcesContent":["/**\r\n * Maritime Cloud Identity Registry API\r\n * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.\r\n *\r\n * OpenAPI spec version: 0.0.1\r\n * Contact: info@maritimecloud.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as models from './models';\r\n\r\nexport interface Organization {\r\n    address: string;\r\n\r\n    /**\r\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\r\n     */\r\n    certificates?: Array<models.Certificate>;\r\n\r\n    country: string;\r\n\r\n    createdAt?: Date;\r\n\r\n    email: string;\r\n\r\n    /**\r\n     * Type of identity federation used by organization\r\n     */\r\n    federationType?: Organization.FederationTypeEnum;\r\n\r\n    identityProviderAttributes?: Array<models.IdentityProviderAttribute>;\r\n\r\n    /**\r\n     * The Maritime Resource Name\r\n     */\r\n    mrn: string;\r\n\r\n    /**\r\n     * The name of the organization\r\n     */\r\n    name: string;\r\n\r\n    updatedAt?: Date;\r\n\r\n    url: string;\r\n\r\n}\r\nexport namespace Organization {\r\n    export enum FederationTypeEnum {\r\n        TestIdp = <any> 'test-idp',\r\n        OwnIdp = <any> 'own-idp',\r\n        ExternalIdp = <any> 'external-idp'\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Organization.ts","/**\r\n * Maritime Cloud Identity Registry API\r\n * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.\r\n *\r\n * OpenAPI spec version: 0.0.1\r\n * Contact: info@maritimecloud.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\nimport * as models from './models';\r\n\r\nexport interface Service {\r\n    /**\r\n     * The domain name the service will be available on. Used in the issued certificates for the service.\r\n     */\r\n    certDomainName?: string;\r\n\r\n    /**\r\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\r\n     */\r\n    certificates?: Array<models.Certificate>;\r\n\r\n    createdAt?: Date;\r\n\r\n    /**\r\n     * The Maritime Resource Name\r\n     */\r\n    mrn: string;\r\n\r\n    name: string;\r\n\r\n    /**\r\n     * Access type of the OpenId Connect client\r\n     */\r\n    oidcAccessType?: Service.OidcAccessTypeEnum;\r\n\r\n    /**\r\n     * The client id of the service in Maritime Cloud. Will be generated.\r\n     */\r\n    oidcClientId?: string;\r\n\r\n    /**\r\n     * The client secret of the service in Maritime Cloud. Will be generated.\r\n     */\r\n    oidcClientSecret?: string;\r\n\r\n    /**\r\n     * The OpenId Connect redirect uri of service.\r\n     */\r\n    oidcRedirectUri?: string;\r\n\r\n    /**\r\n     * Permissions as assigned from the organization\r\n     */\r\n    permissions?: string;\r\n\r\n    updatedAt?: Date;\r\n\r\n}\r\nexport namespace Service {\r\n    export enum OidcAccessTypeEnum {\r\n        Public = <any> 'public',\r\n        BearerOnly = <any> 'bearer-only',\r\n        Confidential = <any> 'confidential'\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Service.ts","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\r\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\r\n\r\n@Component({\r\n  selector: 'service-details',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./service-details.html'),\r\n  styles: []\r\n})\r\nexport class ServiceDetailsComponent {\r\n\tpublic title:string;\r\n\tpublic isLoading:boolean;\r\n\tpublic service:Service;\r\n\tpublic showModal:boolean = false;\r\n\tpublic modalDescription:string;\r\n\tconstructor(private route: ActivatedRoute, private servicesService: IdServicesService, private router:Router, private notifications:MCNotificationsService) {\r\n\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.loadService();\r\n\t}\r\n\r\n\tprivate loadService() {\r\n\t\tthis.isLoading = true;\r\n\t\tlet mrn = this.route.snapshot.params['id'];\r\n\t\tthis.servicesService.getIdService(mrn).subscribe(\r\n\t\t\tservice => {\r\n\t\t\t\tthis.service = service;\r\n\t\t\t\tthis.title = service.name;\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprivate delete() {\r\n\t\tthis.modalDescription = 'Are you sure you want to delete the service?';\r\n\t\tthis.showModal = true;\r\n\t}\r\n\tpublic cancelModal() {\r\n\t\tthis.showModal = false;\r\n\t}\r\n\r\n\tpublic deleteForSure() {\r\n\t\tthis.isLoading = true;\r\n\t\tthis.showModal = false;\r\n\t\tthis.servicesService.deleteIdService(this.service.mrn).subscribe(\r\n\t\t\t() => {\r\n\t\t\t\tthis.router.navigate(['../'], {relativeTo: this.route });\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete the service', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-details/service-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <service-details-view [shouldShowDelete]=\\\"true\\\" (deleteAction)=\\\"delete()\\\" [isLoading]=\\\"isLoading\\\" [title]=\\\"title\\\" [service]=\\\"service\\\"></service-details-view>\\r\\n  </div>\\r\\n</div>\\r\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-details/service-details.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-details/service-details.html\n// module chunks = 0 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {EntityImageModel} from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\r\nimport {AuthService} from \"../../../../../authentication/services/auth.service\";\r\nimport {Observable} from \"rxjs\";\r\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\r\n\r\n@Component({\r\n  selector: 'service-list',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./service-list.html'),\r\n  styles: []\r\n})\r\nexport class ServiceListComponent implements OnInit {\r\n\tprivate KEY_NEW = 'KEY_NEW_SERVICE';\r\n\tprivate services:Array<Service>;\r\n\tpublic entityImageList: Array<EntityImageModel>;\r\n  public organization: Organization;\r\n  public isLoading: boolean;\r\n  constructor(private authService: AuthService, private router:Router, private route:ActivatedRoute, private servicesService: IdServicesService, private orgService: OrganizationsService, private notifications:MCNotificationsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n\t  this.loadServices();\r\n  }\r\n\r\n\tprivate loadMyOrganization() {\r\n\t\tthis.orgService.getMyOrganization().subscribe(\r\n\t\t\torganization => {\r\n\t\t\t\tthis.organization = organization;\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprivate loadServices() {\r\n\t\tthis.servicesService.getIdServices().subscribe(\r\n\t\t\tservices => {\r\n\t\t\t\tthis.services = services;\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.generateEntityImageList();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get services', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tpublic gotoDetails(entityModel:EntityImageModel) {\r\n\t\tif (entityModel.entityId === this.KEY_NEW) {\r\n\t\t\tthis.gotoCreate();\r\n\t\t} else {\r\n\t\t\tthis.router.navigate([entityModel.entityId], {relativeTo: this.route});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic gotoCreate() {\r\n\t\tthis.router.navigate(['register'], {relativeTo: this.route})\r\n\t}\r\n\r\n  private generateEntityImageList() {\r\n\t  this.entityImageList = [];\r\n\t  if (this.services) {\r\n\t\t  this.services.forEach(service => {\r\n\t\t\t    this.entityImageList.push({imageSourceObservable:this.createImgObservable(service), entityId:service.mrn, title:service.name});\r\n\t\t\t  }\r\n\t\t  );\r\n\t  }\r\n\t  if (this.authService.authState.isAdmin()) {\r\n\t\t  this.entityImageList.push({imageSourceObservable:null, entityId:this.KEY_NEW, title:'Register new Service', isAdd:true});\r\n\t  }\r\n  }\r\n\r\n\tprivate createImgObservable(service:Service):Observable<string> {\r\n\t\tlet imageSrc = 'assets/img/no_service.svg';\r\n\t\treturn Observable.create(observer => {\r\n\t\t\tobserver.next(imageSrc);\r\n\t\t});\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-list/service-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Services for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-list/service-list.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-list/service-list.html\n// module chunks = 0 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\r\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\r\nimport {\r\n\tMcFormControlModel, McFormControlType,\r\n\tMcFormControlModelSelect, SelectModel, McFormControlModelCheckbox\r\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\r\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\r\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\r\nimport {UrlValidator} from \"../../../../../theme/validators/url.validator\";\r\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\r\n\r\n\r\n@Component({\r\n  selector: 'service-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./service-new.html'),\r\n  styles: []\r\n})\r\nexport class ServiceNewComponent implements OnInit {\r\n  public organization: Organization;\r\n  private isPrefilled = false;\r\n\tprivate mrn: string;\r\n\tprivate name: string;\r\n\tprivate mrnMask:string;\r\n\tprivate mrnPattern:string;\r\n\tprivate mrnPatternError:string;\r\n\t// McForm params\r\n\tprivate useOIDC:boolean = false;\r\n\tpublic isLoading = true;\r\n\tpublic isRegistering = false;\r\n\tpublic registerTitle = \"Register Service\";\r\n\tpublic registerForm: FormGroup;\r\n\tpublic formControlModels: Array<McFormControlModel>;\r\n\r\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private servicesService: IdServicesService, mrnHelper: MrnHelperService) {\r\n\t\tthis.mrnMask = mrnHelper.mrnMaskForInstance();\r\n\t\tthis.mrnPattern = mrnHelper.mrnPattern();\r\n\t\tthis.mrnPatternError = mrnHelper.mrnPatternError();\r\n\t\tthis.mrn = this.mrnMask;\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.isRegistering = false;\r\n\t\tthis.isLoading = true;\r\n\t\tlet mrn = this.activatedRoute.snapshot.queryParams['mrn'];\r\n\t\tlet name = this.activatedRoute.snapshot.queryParams['name'];\r\n\t\tif (name && mrn) {\r\n\t\t\tthis.isPrefilled = true;\r\n\t\t\tthis.mrn = mrn;\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t\tthis.loadMyOrganization();\r\n\t}\r\n\r\n\tpublic cancel() {\r\n\t\tthis.navigationService.cancelCreateService();\r\n\t}\r\n\r\n\tpublic register() {\r\n\t\tthis.isRegistering = true;\r\n\t\tlet service:Service = {\r\n\t\t\tmrn: this.mrn,\r\n\t\t\tname: this.registerForm.value.name,\r\n\t\t\tpermissions: this.registerForm.value.permissions,\r\n\t\t\tcertDomainName: this.registerForm.value.certDomainName\r\n\t\t};\r\n\t\tif (this.useOIDC) {\r\n\t\t\tservice.oidcRedirectUri = this.registerForm.value.oidcRedirectUri;\r\n\t\t\tlet oidcAccessType = this.registerForm.value.oidcAccessType;\r\n\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\r\n\t\t\t\tservice.oidcAccessType = oidcAccessType;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tservice.oidcAccessType = null;\r\n\t\t\tservice.oidcRedirectUri = null;\r\n\t\t}\r\n\t\tthis.createService(service);\r\n\t}\r\n\r\n\tprivate createService(service:Service) {\r\n\t\tthis.servicesService.createIdService(service).subscribe(\r\n\t\t\tservice => {\r\n\t\t\t\tif (this.isPrefilled) {\r\n\t\t\t\t\tthis.cancel();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.navigationService.navigateToService(service.mrn);\r\n\t\t\t\t}\r\n\t\t\t\tthis.isRegistering = false;\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isRegistering = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to create service', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprivate loadMyOrganization() {\r\n\t\tthis.orgService.getMyOrganization().subscribe(\r\n\t\t\torganization => {\r\n\t\t\t\tthis.organization = organization;\r\n\t\t\t\tthis.generateForm();\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\tprivate shouldUseOIDC(useOIDC:boolean) {\r\n\t\tthis.useOIDC = useOIDC;\r\n\t\tthis.generateForm();\r\n\t}\r\n\r\n\tprivate generateMRN(idValue:string) {\r\n\t\tvar mrn = (idValue?idValue:'');\r\n\t\tlet valueNoSpaces = mrn.split(' ').join('').toLowerCase();\r\n\t\tthis.mrn = this.mrnMask + valueNoSpaces;\r\n\t\tthis.registerForm.patchValue({mrn: this.mrn});\r\n\t}\r\n\r\n\tprivate generateForm() {\r\n\t\tvar oldForm = this.registerForm;\r\n\t\tthis.registerForm = this.formBuilder.group({});\r\n\t\tif (!oldForm) {\r\n\t\t\toldForm = this.registerForm;\r\n\t\t}\r\n\t\tthis.formControlModels = [];\r\n\r\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\r\n\t\tvar formControl = new FormControl(this.mrn, formControlModel.validator);\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tif (!this.isPrefilled) {\r\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'serviceId', controlType: McFormControlType.Text, labelName: 'Service ID', placeholder: 'Enter Service ID to generate MRN', validator:Validators.required, pattern:this.mrnPattern, errorText:this.mrnPatternError};\r\n\t\t\tformControl = new FormControl('', formControlModel.validator);\r\n\t\t\tformControl.valueChanges.subscribe(param => this.generateMRN(param));\r\n\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModel);\r\n\t\t}\r\n\r\n\r\n\t\tif (this.isPrefilled) {\r\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true};\r\n\t\t\tformControl = new FormControl(this.name, formControlModel.validator);\r\n\t\t} else {\r\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\r\n\t\t\tformControl = new FormControl('', formControlModel.validator);\r\n\t\t}\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\r\n\t\tformControl = new FormControl(oldForm.value.permissions, formControlModel.validator);\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\r\n\t\tformControl = new FormControl(oldForm.value.certDomainName, formControlModel.validator);\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.registerForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\r\n\t\tformControl = new FormControl({value: formControlModelCheckbox.state, disabled: false}, formControlModelCheckbox.validator);\r\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\r\n\t\tthis.registerForm.addControl(formControlModelCheckbox.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModelCheckbox);\r\n\r\n\t\tif (this.useOIDC) {\r\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.compose([Validators.required, UrlValidator.validate]), errorText:'URI not valid'};\r\n\t\t\tformControl = new FormControl('', formControlModel.validator);\r\n\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:this.selectValues(), formGroup: this.registerForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate};\r\n\t\t\tformControl = new FormControl('', formControlModelSelect.validator);\r\n\t\t\tthis.registerForm.addControl(formControlModelSelect.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModelSelect);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate selectValues():Array<SelectModel> {\r\n\t\tlet selectValues:Array<SelectModel> = [];\r\n\t\tselectValues.push({value:undefined, label:'Choose access type...', isSelected: true});\r\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\r\n\t\tallOidcTypes.forEach(oidcType => {\r\n\t\t\tselectValues.push({value:oidcType.value, label:oidcType.label, isSelected: false});\r\n\t\t});\r\n\t\treturn selectValues;\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-new/service-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Register new Service for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-form [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isRegistering\\\" [registerTitle]=\\\"registerTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"register()\\\"></mc-form>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-new/service-new.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-new/service-new.html\n// module chunks = 0 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\r\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\r\nimport {\r\n\tMcFormControlModel, McFormControlType,\r\n\tMcFormControlModelSelect, SelectModel, McFormControlModelCheckbox\r\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\r\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\r\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport {ServiceViewModel} from \"../../view-models/ServiceViewModel\";\r\nimport {UrlValidator} from \"../../../../../theme/validators/url.validator\";\r\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\r\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\r\n\r\n\r\n@Component({\r\n  selector: 'service-update',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./service-update.html'),\r\n  styles: []\r\n})\r\nexport class ServiceUpdateComponent implements OnInit {\r\n\r\n\tpublic idService:Service;\r\n\tpublic showModal:boolean = false;\r\n\tpublic modalDescription:string;\r\n\t// McForm params\r\n\tprivate useOIDC:boolean = false;\r\n\tpublic isLoading = true;\r\n\tpublic isUpdating = false;\r\n\tpublic updateTitle = \"Update\";\r\n\tpublic updateForm: FormGroup;\r\n\tpublic formControlModels: Array<McFormControlModel>;\r\n\r\n\tconstructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private servicesService: IdServicesService, mrnHelper: MrnHelperService) {\r\n\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.isUpdating = false;\r\n\t\tthis.isLoading = true;\r\n\t\tthis.loadIdService();\r\n\t}\r\n\r\n\tprivate loadIdService() {\r\n\t\tlet mrn = this.activatedRoute.snapshot.params['id'];\r\n\t\tthis.servicesService.getIdService(mrn).subscribe(\r\n\t\t\tidService => {\r\n\t\t\t\tthis.idService = idService;\r\n\t\t\t\tthis.useOIDC = this.idService.oidcRedirectUri && this.idService.oidcRedirectUri.length > 0;\r\n\t\t\t\tthis.generateForm();\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\r\n\r\n\t\t\t\tthis.navigationService.navigateToVessel(mrn);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tpublic cancel() {\r\n\t\tthis.navigationService.gobackFromUpdateService();\r\n\t}\r\n\r\n\tpublic update() {\r\n\t\tif (this.hasActiveCertificate()){\r\n\t\t\tthis.modalDescription = \"<b>Certificates</b> will be <b>invalid</b> if you update the service.<br>You need to revoke the certificates and issue new ones.<br><br>Would you still like to update?\";\r\n\t\t\tthis.showModal = true;\r\n\t\t} else {\r\n\t\t\tthis.updateForSure();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate hasActiveCertificate() : boolean {\r\n\t\tif (this.idService.certificates && this.idService.certificates.length > 0) {\r\n\t\t\tfor(let certificate of this.idService.certificates) {\r\n\t\t\t\tif (!certificate.revoked) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic cancelModal() {\r\n\t\tthis.showModal = false;\r\n\t}\r\n\r\n\tpublic updateForSure() {\r\n\t\tthis.isUpdating = true;\r\n\t\tthis.updateValues(true);\r\n\t\tthis.updateIdService(this.idService);\r\n\t}\r\n\r\n\tprivate updateValues(overwriteOidc: boolean) {\r\n\t\tthis.idService.name = this.updateForm.value.name;\r\n\t\tthis.idService.permissions = this.updateForm.value.permissions;\r\n\t\tthis.idService.certDomainName = this.updateForm.value.certDomainName;\r\n\r\n\t\tif (overwriteOidc) {\r\n\t\t\tif (this.useOIDC) {\r\n\t\t\t\tthis.idService.oidcRedirectUri = this.updateForm.value.oidcRedirectUri;\r\n\t\t\t\tlet oidcAccessType = this.updateForm.value.oidcAccessType;\r\n\t\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\r\n\t\t\t\t\tthis.idService.oidcAccessType = oidcAccessType;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.idService.oidcAccessType = null;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t\tthis.idService.oidcAccessType = null;\r\n\t\t\t\t\tthis.idService.oidcRedirectUri = null;\r\n\t\t\t\t\tthis.idService.oidcClientId = null;\r\n\t\t\t\t\tthis.idService.oidcClientSecret = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateIdService(service:Service) {\r\n\t\tthis.servicesService.updateIdService(service).subscribe(\r\n\t\t\t_ => {\r\n\t\t\t\tthis.isUpdating = false;\r\n\t\t\t\tthis.navigationService.gobackFromUpdateService();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isUpdating = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to update service', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprivate shouldUseOIDC(useOIDC:boolean) {\r\n\t\tthis.useOIDC = useOIDC;\r\n\t\tthis.updateValues(false);\r\n\t\tthis.generateForm();\r\n\t}\r\n\r\n\tprivate generateForm() {\r\n\t\tthis.updateForm = this.formBuilder.group({});\r\n\r\n\t\tthis.formControlModels = [];\r\n\r\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.updateForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: '', isDisabled: true};\r\n\t\tvar formControl = new FormControl(this.idService.mrn, formControlModel.validator);\r\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: '', isDisabled: true};\r\n\t\tformControl = new FormControl(this.idService.name, formControlModel.validator);\r\n\r\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\r\n\t\tformControl = new FormControl(this.idService.permissions, formControlModel.validator);\r\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.updateForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\r\n\t\tformControl = new FormControl(this.idService.certDomainName, formControlModel.validator);\r\n\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.updateForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\r\n\t\tformControl = new FormControl({value: \"\\\"\" + formControlModelCheckbox.state + \"\\\"\", disabled: false}, formControlModelCheckbox.validator);\r\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\r\n\t\tthis.updateForm.addControl(formControlModelCheckbox.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModelCheckbox);\r\n\r\n\t\tif (this.useOIDC) {\r\n\t\t\tformControlModel = {formGroup: this.updateForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.compose([Validators.required, UrlValidator.validate]), errorText:'URI not valid'};\r\n\t\t\tformControl = new FormControl(this.idService.oidcRedirectUri, formControlModel.validator);\r\n\t\t\tthis.updateForm.addControl(formControlModel.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\t\tlet selectValues = this.selectValues();\r\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:selectValues, formGroup: this.updateForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate};\r\n\t\t\tformControl = new FormControl(this.selectedValue(selectValues), formControlModelSelect.validator);\r\n\t\t\tthis.updateForm.addControl(formControlModelSelect.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModelSelect);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate selectedValue(selectValues:Array<SelectModel>):string {\r\n\t\tfor(let selectModel of selectValues) {\r\n\t\t\tif (selectModel.isSelected) {\r\n\t\t\t\treturn selectModel.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn '';\r\n\t}\r\n\r\n\tprivate selectValues():Array<SelectModel> {\r\n\t\tlet selectValues:Array<SelectModel> = [];\r\n\t\tselectValues.push({value:undefined, label:'Choose access type...', isSelected: this.idService.oidcAccessType == null});\r\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\r\n\t\tallOidcTypes.forEach(oidcType => {\r\n\t\t\tlet isSelected = OidcAccessTypeEnum[oidcType.value] === OidcAccessTypeEnum[this.idService.oidcAccessType];\r\n\t\t\tselectValues.push({value:oidcType.value, label:oidcType.label, isSelected: isSelected});\r\n\t\t});\r\n\t\treturn selectValues;\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/components/service-update/service-update.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Update - {{idService?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-form [formNeedsUpdating]=\\\"true\\\" [formGroup]=\\\"updateForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\" [isRegistering]=\\\"isUpdating\\\" [registerTitle]=\\\"updateTitle\\\" (onCancel)=\\\"cancel()\\\" (onRegister)=\\\"update()\\\"></mc-form>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"updateForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Update service'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Update'\\\"></mc-modal>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/services/components/service-update/service-update.html\n// module id = ./src/app/pages/org-identity-registry/services/components/service-update/service-update.html\n// module chunks = 0 1","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'services',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class ServicesComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\n\r\nimport { routing }       from './services.routing';\r\nimport {ServicesComponent} from \"./services.component\";\r\nimport {ServiceListComponent} from \"./components/service-list/service-list.component\";\r\nimport {ServiceDetailsComponent} from \"./components/service-details/service-details.component\";\r\nimport {NgaModule} from \"../../../theme/nga.module\";\r\nimport {SharedModule} from \"../../shared/shared.module\";\r\nimport {ServiceNewComponent} from \"./components/service-new/service-new.component\";\r\nimport {ServiceUpdateComponent} from \"./components/service-update/service-update.component\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n    SharedModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    ServicesComponent,\r\n    ServiceDetailsComponent,\r\n    ServiceListComponent,\r\n\t  ServiceNewComponent,\r\n\t  ServiceUpdateComponent\r\n  ],\r\n\texports: [\r\n\t\tServiceNewComponent,\r\n\t\tServiceUpdateComponent\r\n\t]\r\n})\r\nexport default class ServicesModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\nimport {ServicesComponent} from \"./services.component\";\r\nimport {ServiceListComponent} from \"./components/service-list/service-list.component\";\r\nimport {ServiceDetailsComponent} from \"./components/service-details/service-details.component\";\r\nimport {ServiceNewComponent} from \"./components/service-new/service-new.component\";\r\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\r\nimport {ServiceUpdateComponent} from \"./components/service-update/service-update.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nconst routes: Routes = [\r\n  {\r\n    path: 'services',\r\n    component: ServicesComponent,\r\n    data:{breadcrumb: 'Services'},\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: ServiceListComponent\r\n      },\r\n\t    {\r\n\t\t    path: 'issuecert',\r\n\t\t    component: CertificateIssueNewComponent,\r\n\t\t    data:{breadcrumb: 'New Certificate'},\r\n\t\t    children: [\r\n\t\t    ]\r\n\t    },\r\n\t    {\r\n\t\t    path: 'register',\r\n\t\t    component: ServiceNewComponent,\r\n\t\t    data:{breadcrumb: 'Register'}\r\n\t    },\r\n      {\r\n        path: ':id',\r\n        component: ServiceDetailsComponent,\r\n        data:{breadcrumb: 'Details'}\r\n      },\r\n\t    {\r\n\t\t    path: 'update/:id',\r\n\t\t    component: ServiceUpdateComponent,\r\n\t\t    data:{breadcrumb: 'Update'}\r\n\t    }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/services.routing.ts","import {EnumsHelper} from \"../../../../shared/enums-helper\";\r\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport OidcAccessTypeEnum = Service.OidcAccessTypeEnum;\r\n\r\nexport interface OidcAccessTypeViewModel {\r\n\tvalue?:string;\r\n\tlabel?:string;\r\n}\r\n\r\nexport class ServiceViewModel {\r\n\r\n\r\n\tpublic static getAllOidcAccessTypes(): Array<OidcAccessTypeViewModel> {\r\n\t\tlet models:Array<OidcAccessTypeViewModel> = [];\r\n\r\n\t\tlet keysAndValues = EnumsHelper.getKeysAndValuesFromEnum(OidcAccessTypeEnum);\r\n\t\tkeysAndValues.forEach(enumKeyAndValue => {\r\n\t\t\tlet model:OidcAccessTypeViewModel = {};\r\n\t\t\tmodel.value = enumKeyAndValue.value;\r\n\t\t\tmodel.label = ServiceViewModel.getLabelForEnum(enumKeyAndValue.value);\r\n\t\t\tmodels.push(model);\r\n\t\t});\r\n\t\treturn models;\r\n\t}\r\n\r\n\r\n\tpublic static getLabelForEnum(oidcAccessTypeEnum:OidcAccessTypeEnum):string {\r\n\t\tif (!oidcAccessTypeEnum) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\tvar text = '';\r\n\t\tswitch (oidcAccessTypeEnum) {\r\n\t\t\tcase OidcAccessTypeEnum.BearerOnly: {\r\n\t\t\t\ttext = 'Bearer only';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase OidcAccessTypeEnum.Confidential: {\r\n\t\t\t\ttext = 'Confidential';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase OidcAccessTypeEnum.Public: {\r\n\t\t\t\ttext = 'Public';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault : {\r\n\t\t\t\ttext = OidcAccessTypeEnum[oidcAccessTypeEnum];\r\n\t\t\t\tif (!text) {\r\n\t\t\t\t\ttext = ''+ oidcAccessTypeEnum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/services/view-models/ServiceViewModel.ts","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {FileHelperService} from \"../../../../../shared/file-helper.service\";\r\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\r\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\r\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\r\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\r\nimport {AuthService} from \"../../../../../authentication/services/auth.service\";\r\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\r\n\r\n@Component({\r\n  selector: 'design-details',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./design-details.html'),\r\n  styles: []\r\n})\r\nexport class DesignDetailsComponent {\r\n  public design: Design;\r\n  public instances: Array<Instance>;\r\n  public title:string;\r\n  public labelValues:Array<LabelValueModel>;\r\n  public isLoadingInstances: boolean;\r\n  public isLoadingDesign: boolean;\r\n  public onCreate: Function;\r\n  public onGotoSpec: Function;\r\n  public onGotoInstance: Function;\r\n\tpublic showModal:boolean = false;\r\n\tpublic modalDescription:string;\r\n\r\n  constructor(private authService: AuthService, private route: ActivatedRoute, private router: Router, private viewModelService: SrViewModelService, private navigationHelperService: NavigationHelperService, private instancesService: InstancesService, private specificationsService: SpecificationsService, private notifications: MCNotificationsService, private designsService: DesignsService, private fileHelperService: FileHelperService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onCreate = this.createInstance.bind(this);\r\n    this.onGotoSpec = this.gotoSpecification.bind(this);\r\n    this.onGotoInstance = this.gotoInstance.bind(this);\r\n    this.isLoadingDesign = true;\r\n    this.isLoadingInstances = true;\r\n    this.title = 'Loading ...';\r\n    this.loadDesign();\r\n  }\r\n\r\n  public downloadXml() {\r\n    this.fileHelperService.downloadXml(this.design.designAsXml);\r\n  }\r\n\r\n  public downloadDoc() {\r\n    this.fileHelperService.downloadDoc(this.design.designAsDoc);\r\n  }\r\n\r\n  private loadDesign() {\r\n    let designId = this.route.snapshot.params['id'];\r\n    let version = this.route.snapshot.queryParams['designVersion'];\r\n    this.designsService.getDesign(designId, version).subscribe(\r\n      design => {\r\n        this.title = design.name;\r\n        this.design = design;\r\n\t      this.labelValues = this.viewModelService.generateLabelValuesForDesign(this.design);\r\n\t      this.generateLabelValuesForSpecification();\r\n\t      this.isLoadingDesign = false;\r\n        this.loadInstances();\r\n      },\r\n      err => {\r\n        // TODO: make this as a general component\r\n        if (err.status == 404) {\r\n          this.router.navigate(['/error404'], {relativeTo: this.route, replaceUrl: true })\r\n        }\r\n        this.title = 'Error while loading';\r\n        this.isLoadingDesign = false;\r\n        this.isLoadingInstances = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get design', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadInstances() {\r\n    this.instancesService.getInstancesForDesign(this.design.designId, this.design.version).subscribe(\r\n      instances => {\r\n        this.instances = instances;\r\n        this.isLoadingInstances = false;\r\n      },\r\n      err => {\r\n        this.isLoadingInstances = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get instances', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private generateLabelValuesForSpecification() {\r\n    if (this.design.specifications && this.design.specifications.length > 0) {\r\n      let plur = (this.design.specifications.length > 1 ? 's' : '');\r\n      var label = 'Implemented specification' + plur;\r\n      this.design.specifications.forEach((specification) => {\r\n        this.labelValues.push({label: label, valueHtml: specification.name + \" - \" + specification.version, linkFunction: this.onGotoSpec, linkValue: [specification.specificationId,specification.version]});\r\n        label = \"\";\r\n      });\r\n    }\r\n  }\r\n\r\n  private createInstance() {\r\n    this.navigationHelperService.navigateToCreateInstance(this.design.designId, this.design.version);\r\n  }\r\n\r\n  private gotoSpecification(linkValue: any) {\r\n    try {\r\n      this.navigationHelperService.navigateToOrgSpecification(linkValue[0], linkValue[1]);\r\n    } catch ( error ) {\r\n      this.notifications.generateNotification('Error', 'Error when trying to go to specification', MCNotificationType.Error, error);\r\n    }\r\n  }\r\n\r\n  private gotoInstance(index:number) {\r\n    this.navigationHelperService.navigateToOrgInstance(this.instances[index].instanceId, this.instances[index].version);\r\n  }\r\n\tprivate isMyOrg():boolean {\r\n\t\treturn this.design.organizationId === this.authService.authState.orgMrn;\r\n\t}\r\n\r\n\tprivate isAdmin():boolean {\r\n\t\treturn (this.authService.authState.isAdmin() && this.isMyOrg()) ||  this.authService.authState.isSiteAdmin();\r\n\t}\r\n\r\n\tpublic shouldDisplayDelete():boolean {\r\n\t\treturn this.isAdmin() && !this.isLoadingInstances && !this.hasInstances();\r\n\t}\r\n\r\n\tprivate hasInstances():boolean {\r\n\t\treturn this.instances && this.instances.length > 0;\r\n\t}\r\n\r\n\tprivate delete() {\r\n\t\tthis.modalDescription = 'Do you want to delete the design?';\r\n\t\tthis.showModal = true;\r\n\t}\r\n\tpublic cancelModal() {\r\n\t\tthis.showModal = false;\r\n\t}\r\n\r\n\tpublic deleteForSure() {\r\n\t\tthis.isLoadingDesign = true;\r\n\t\tthis.showModal = false;\r\n\t\tthis.designsService.deleteDesign(this.design).subscribe(\r\n\t\t\t() => {\r\n\t\t\t\tthis.navigationHelperService.navigateToOrgDesign('', '');\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoadingDesign = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete design', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/components/design-details/design-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-label-value-table [isLoading]=\\\"isLoadingDesign\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n      <ul *ngIf=\\\"design && !isLoadingDesign\\\" class=\\\"btn-list clearfix\\\">\\r\\n        <li *ngIf=\\\"design.designAsDoc\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadDoc()\\\">Download document</button>\\r\\n        </li>\\r\\n        <li *ngIf=\\\"design.designAsXml\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXml()\\\">Download XML</button>\\r\\n        </li>\\r\\n        <li *ngIf=\\\"shouldDisplayDelete()\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Design</button>\\r\\n        </li>\\r\\n      </ul>\\r\\n      <div class=\\\"separator\\\"></div>\\r\\n\\r\\n      <h5>Instances that implements this Design</h5>\\r\\n      <instances-table [instances]=\\\"instances\\\" [isLoading]=\\\"isLoadingInstances\\\" [onRowClick]=\\\"onGotoInstance\\\"></instances-table>\\r\\n      <mc-create-button *ngIf=\\\"!isLoadingInstances\\\" title=\\\"Register new Instance\\\" [onClick]=\\\"onCreate\\\" ></mc-create-button>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete design'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/designs/components/design-details/design-details.html\n// module id = ./src/app/pages/org-service-registry/designs/components/design-details/design-details.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\r\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\r\n\r\n@Component({\r\n  selector: 'design-list',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./design-list.html'),\r\n  styles: []\r\n})\r\nexport class DesignListComponent implements OnInit {\r\n  public organization: Organization;\r\n  public designs: Array<Design>;\r\n  public isLoading: boolean;\r\n  public onGotoDesign: Function;\r\n\tpublic cardTitle:string;\r\n  constructor(private route: ActivatedRoute, private router: Router, private notifications: MCNotificationsService, private orgService: OrganizationsService, private designsService: DesignsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\t  this.cardTitle = 'Loading ...';\r\n    this.onGotoDesign = this.gotoDesign.bind(this);\r\n\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n    this.loadDesigns();\r\n  }\r\n\r\n  private loadDesigns() {\r\n    this.designsService.getAllDesigns().subscribe(\r\n      designs => {\r\n        this.designs = designs;\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.isLoading = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get designs', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n\t      //this.cardTitle = 'Designs for ' + organization.name;\r\n\t      this.cardTitle = 'All Designs';\r\n      },\r\n      err => {\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private gotoDesign(index:number) {\r\n    this.router.navigate([this.designs[index].designId], {queryParams: { designVersion: this.designs[index].version}, relativeTo: this.route })\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/components/design-list/design-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <designs-table [designs]=\\\"designs\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onGotoDesign\\\"></designs-table>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/designs/components/design-list/design-list.html\n// module id = ./src/app/pages/org-service-registry/designs/components/design-list/design-list.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\r\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\r\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {XmlParserService} from \"../../../../../shared/xml-parser.service\";\r\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\r\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\r\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\r\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\r\nimport {DesignXmlParser} from \"../../../shared/services/design-xml-parser.service\";\r\n\r\n@Component({\r\n  selector: 'design-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./design-new.html'),\r\n  styles: []\r\n})\r\nexport class DesignNewComponent implements OnInit {\r\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\r\n\tpublic hasMrnError: boolean = false;\r\n\tpublic mrnErrorText: string;\r\n\r\n  public organization: Organization;\r\n  public labelValues:Array<LabelValueModel>;\r\n  public captionXml = 'Upload Design Xml file';\r\n  public captionDoc = 'Upload Design Document file';\r\n  public fileTypeXml = FileUploadType.Xml;\r\n  public fileTypeDoc = FileUploadType.Doc;\r\n  public requiredTextXml = 'You need to upload Xml file';\r\n  public isFormValid = false;\r\n  public isLoading = true;\r\n\r\n  public isRegistering = false;\r\n  public registerTitle = \"Register Design\";\r\n  public registerButtonClass = \"btn btn-danger btn-raised\";\r\n  public onRegister: Function;\r\n\r\n  private specification:Specification;\r\n  private xml:Xml;\r\n  private doc:Doc;\r\n\r\n  constructor(private xmlParser: DesignXmlParser, private mrnHelper: MrnHelperService, private activatedRoute: ActivatedRoute, private xmlParserService: XmlParserService, private viewModelService: SrViewModelService, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private designsService: DesignsService, private orgService: OrganizationsService, private specificationsService: SpecificationsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onRegister = this.register.bind(this);\r\n    this.isRegistering = false;\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n    this.loadSpecification();\r\n  }\r\n\r\n  public calculateFormValid() {\r\n    this.isFormValid = this.xml != null;\r\n  }\r\n\r\n  public onUploadDoc(file: Doc) {\r\n    this.doc = file;\r\n    this.calculateFormValid();\r\n  }\r\n\r\n  public onUploadXml(file: Xml) {\r\n\t  if (file && this.isXmlValid(file)) {\r\n\t\t  this.xml = file;\r\n\t  } else {\r\n\t\t  this.xml = null;\r\n\t\t  this.fileUploadXml.resetFileSelection();\r\n\t  }\r\n    this.calculateFormValid();\r\n  }\r\n\r\n\tprivate isXmlValid(file: Xml) : boolean {\r\n\t\ttry {\r\n\t\t\tlet mrn = this.xmlParser.getMrn(file);\r\n\t\t\tlet isValid = this.mrnHelper.checkMrnForDesign(mrn);\r\n\t\t\tthis.hasMrnError = !isValid;\r\n\t\t\tif (!isValid) {\r\n\t\t\t\tthis.mrnErrorText = \"The ID in the Xml-file is wrong. The ID is supposed to be an MRN in the following format:<BR>\"\r\n\t\t\t\t\t+ this.mrnHelper.mrnMaskForDesign() + \"'ID'<BR>\"\r\n\t\t\t\t\t+ \"'ID'=\" + this.mrnHelper.mrnPatternError();\r\n\t\t\t}\r\n\t\t\treturn isValid;\r\n\t\t} catch ( error ) {\r\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n  public cancel() {\r\n    this.navigationService.cancelCreateDesign();\r\n  }\r\n\r\n  public register() {\r\n    this.isRegistering = true;\r\n    try {\r\n      var design:Design = {};\r\n      design.designAsXml = this.xml;\r\n      design.designAsDoc = this.doc;\r\n\t    design.name = this.xmlParser.getName(this.xml);\r\n\t    design.description = this.xmlParser.getDescription(this.xml);\r\n\t    design.designId = this.xmlParser.getMrn(this.xml);\r\n\t    design.status = this.xmlParser.getStatus(this.xml);\r\n\t    design.organizationId = this.organization.mrn;\r\n\t    design.version = this.xmlParser.getVersion(this.xml);\r\n\r\n      design.specifications = [this.specification];\r\n      this.createDesign(design);\r\n    } catch ( error ) {\r\n      this.isRegistering = false;\r\n      this.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\r\n    }\r\n  }\r\n\r\n  private createDesign(design:Design) {\r\n    this.designsService.createDesign(design).subscribe(\r\n      design => {\r\n        this.navigationService.navigateToOrgDesign(design.designId, design.version);\r\n        this.isRegistering = false;\r\n      },\r\n      err => {\r\n        this.isRegistering = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to create design', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n        this.calculateFormValid();\r\n      },\r\n      err => {\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadSpecification() {\r\n    let specificationId = this.activatedRoute.snapshot.queryParams['specificationId'];\r\n    let version = this.activatedRoute.snapshot.queryParams['specificationVersion'];\r\n    this.specificationsService.getSpecification(specificationId, version).subscribe(\r\n      specification => {\r\n        this.specification = specification;\r\n        this.labelValues = this.viewModelService.generateLabelValuesForSpecification(this.specification);\r\n        this.calculateFormValid();\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.isLoading = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get specification', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/components/design-new/design-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Register new Design for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <h5 *ngIf=\\\"specification\\\">Registering a design for this specification</h5>\\r\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n\\r\\n      <div class=\\\"separator\\\"></div>\\r\\n\\r\\n      <div *ngIf=\\\"specification\\\">\\r\\n        <form>\\r\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" [requiredText]=\\\"requiredTextXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\r\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\r\\n          <div *ngIf=\\\"hasMrnError\\\" class=\\\"mc-form-error\\\" [innerHTML]=\\\"mrnErrorText | undefined | sanitizeHtml\\\"></div>\\r\\n          <ul class=\\\"btn-list clearfix\\\">\\r\\n            <li>\\r\\n              <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\r\\n            </li>\\r\\n            <li>\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n            </li>\\r\\n          </ul>\\r\\n        </form>\\r\\n      </div>\\r\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!specification && !isLoading\\\">No data</div>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/designs/components/design-new/design-new.html\n// module id = ./src/app/pages/org-service-registry/designs/components/design-new/design-new.html\n// module chunks = 0","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'designs',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class DesignsComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/designs.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\n\r\nimport { routing }       from './designs.routing';\r\nimport {NgaModule} from \"../../../theme/nga.module\";\r\nimport {DesignsComponent} from \"./designs.component\";\r\nimport {DesignListComponent} from \"./components/design-list/design-list.component\";\r\nimport {DesignDetailsComponent} from \"./components/design-details/design-details.component\";\r\nimport {SharedModule} from \"../../shared/shared.module\";\r\nimport {DesignNewComponent} from \"./components/design-new/design-new.component\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n    SharedModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    DesignsComponent,\r\n    DesignListComponent,\r\n    DesignDetailsComponent,\r\n    DesignNewComponent\r\n  ]\r\n})\r\nexport default class DesignsModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/designs.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\nimport {DesignsComponent} from \"./designs.component\";\r\nimport {DesignListComponent} from \"./components/design-list/design-list.component\";\r\nimport {DesignDetailsComponent} from \"./components/design-details/design-details.component\";\r\nimport {DesignNewComponent} from \"./components/design-new/design-new.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nexport const designRoutes: Routes = [\r\n  {\r\n    path: 'designs',\r\n    component: DesignsComponent,\r\n    data:{breadcrumb: 'Designs'},\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: DesignListComponent\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: DesignNewComponent,\r\n        data:{breadcrumb: 'Register'}\r\n      },\r\n      {\r\n        path: ':id',\r\n        component: DesignDetailsComponent,\r\n        data:{breadcrumb: 'Details'}\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(designRoutes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/designs/designs.routing.ts","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {FileHelperService} from \"../../../../../shared/file-helper.service\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\r\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\r\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\r\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\r\nimport {AuthService} from \"../../../../../authentication/services/auth.service\";\r\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\r\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\r\nimport {DocsService} from \"../../../../../backend-api/service-registry/services/docs.service\";\r\n\r\n@Component({\r\n  selector: 'instance-details',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./instance-details.html'),\r\n  styles: []\r\n})\r\nexport class InstanceDetailsComponent {\r\n  public instance: Instance;\r\n  public design: Design;\r\n  public title:string;\r\n  public labelValues:Array<LabelValueModel>;\r\n  public isLoadingInstance: boolean;\r\n  public onGotoDesign: Function;\r\n\tpublic showModal:boolean = false;\r\n\tpublic modalDescription:string;\r\n\r\n\tpublic isLoadingIdService: boolean;\r\n\tpublic titleIdService:string;\r\n\tpublic idService:Service;\r\n\tpublic shouldDisplayIdService:boolean = false;\r\n\tpublic shouldDisplayCreateButton:boolean = false;\r\n\tpublic showUpdateIdService:boolean = false;\r\n\r\n  constructor(private servicesService:IdServicesService, private authService: AuthService, private route: ActivatedRoute, private router: Router, private viewModelService: SrViewModelService, private navigationHelperService: NavigationHelperService, private instancesService: InstancesService, private notifications: MCNotificationsService, private designsService: DesignsService, private fileHelperService: FileHelperService, private mrnHelper: MrnHelperService, private docsService: DocsService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onGotoDesign = this.gotoDesign.bind(this);\r\n\t  this.shouldDisplayCreateButton = false;\r\n\t  this.isLoadingInstance = true;\r\n\t  this.isLoadingIdService = true;\r\n    this.title = 'Loading ...';\r\n\t  this.titleIdService = 'ID information';\r\n    this.loadInstance();\r\n  }\r\n\r\n  public downloadXml() {\r\n    this.fileHelperService.downloadXml(this.instance.instanceAsXml);\r\n  }\r\n\r\n  public downloadDoc() {\r\n\t  this.fileHelperService.downloadDoc(this.instance.instanceAsDoc);\r\n  }\r\n\r\n  public createIdService() {\r\n\t\tthis.navigationHelperService.navigateToCreateIdService(this.instance.instanceId, this.instance.name);\r\n  }\r\n\r\n  private isMyOrg():boolean {\r\n\t  return this.instance.organizationId === this.authService.authState.orgMrn;\r\n  }\r\n\r\n\r\n  private loadInstance() {\r\n    let instanceId = this.route.snapshot.params['id'];\r\n    let version = this.route.snapshot.queryParams['instanceVersion'];\r\n    this.instancesService.getInstance(instanceId, version).subscribe(\r\n      instance => {\r\n        this.title = instance.name;\r\n        this.instance = instance;\r\n        this.loadDesign();\r\n      },\r\n      err => {\r\n        // TODO: make this as a general component\r\n        if (err.status == 404) {\r\n          this.router.navigate(['/error404'], {relativeTo: this.route, replaceUrl: true })\r\n        }\r\n        this.title = 'Error while loading';\r\n        this.isLoadingInstance = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get instance', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadIdService(mrn:string) {\r\n\t  this.servicesService.getIdService(mrn).subscribe(\r\n\t\t  service => {\r\n\t\t\t  this.idService = service;\r\n\t\t\t  this.showUpdateIdService = (this.isMyOrg() && this.isAdmin()) || this.authService.authState.isSiteAdmin();\r\n\t\t\t  this.isLoadingIdService = false;\r\n\t\t  },\r\n\t\t  err => {\r\n\t\t\t  if (err.status == 404) {\r\n\t\t\t\t  this.shouldDisplayIdService = false;\r\n\t\t\t\t  this.shouldDisplayCreateButton = this.isAdmin();\r\n\t\t\t  } else {\r\n\t\t\t    this.notifications.generateNotification('Error', 'Error when trying to get the service', MCNotificationType.Error, err);\r\n\t\t\t  }\r\n\t\t\t  this.isLoadingIdService = false;\r\n\t\t  }\r\n\t  );\r\n  }\r\n\r\n  private loadDesign() {\r\n    this.designsService.getDesignForInstance(this.instance).subscribe(\r\n      design => {\r\n        this.design = design;\r\n        this.labelValues = this.viewModelService.generateLabelValuesForInstance(this.instance);\r\n        this.generateLabelValueForDesign();\r\n        this.isLoadingInstance = false;\r\n\t      if (this.isMyOrg() || this.authService.authState.isSiteAdmin()) {\r\n\t\t      this.shouldDisplayIdService = true;\r\n\t\t      this.loadIdService(this.instance.instanceId);\r\n\t      }\r\n      },\r\n      err => {\r\n        this.isLoadingInstance = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get design', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private generateLabelValueForDesign() {\r\n    if (this.design) {\r\n      var label = 'Implemented design';\r\n\t    this.labelValues.push({label: label, valueHtml: this.design.name + \" - \" + this.design.version, linkFunction: this.onGotoDesign, linkValue: [this.design.designId, this.design.version]});\r\n    }\r\n  }\r\n\r\n\tpublic updateIdService() {\r\n\t\tthis.navigationHelperService.navigateToUpdateIdService(this.idService.mrn);\r\n\t}\r\n\r\n  private gotoDesign(linkValue:any) {\r\n    try {\r\n      this.navigationHelperService.navigateToOrgDesign(linkValue[0], linkValue[1]);\r\n    } catch ( error ) {\r\n      this.notifications.generateNotification('Error', 'Error when trying to go to instance', MCNotificationType.Error, error);\r\n    }\r\n  }\r\n\r\n\tprivate isAdmin():boolean {\r\n\t\treturn (this.authService.authState.isAdmin() && this.isMyOrg()) || this.authService.authState.isSiteAdmin();\r\n\t}\r\n\r\n\tpublic showDelete():boolean {\r\n\t\treturn this.isAdmin();\r\n\t}\r\n\r\n\tprivate delete() {\r\n\t\tthis.modalDescription = 'Do you want to delete the instance?';\r\n\t\tthis.showModal = true;\r\n\t}\r\n\tpublic cancelModal() {\r\n\t\tthis.showModal = false;\r\n\t}\r\n\r\n\tpublic deleteForSure() {\r\n\t\tthis.isLoadingInstance = true;\r\n\t\tthis.showModal = false;\r\n\t\tthis.instancesService.deleteInstance(this.instance).subscribe(\r\n\t\t\t() => {\r\n\t\t\t\tthis.deleteIdService();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoadingInstance = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete instance', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprivate deleteIdService() {\r\n  \tif (this.idService) {\r\n\t\t\tthis.servicesService.deleteIdService(this.idService.mrn).subscribe(\r\n\t\t\t\t() => {\r\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgInstance('', '');\r\n\t\t\t\t},\r\n\t\t\t\terr => {\r\n\t\t\t\t\tthis.navigationHelperService.navigateToOrgInstance('', '');\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t  } else {\r\n\t\t  this.navigationHelperService.navigateToOrgInstance('', '');\r\n\t  }\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-label-value-table [isLoading]=\\\"isLoadingInstance\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n      <ul *ngIf=\\\"instance && !isLoadingInstance\\\" class=\\\"btn-list clearfix\\\">\\r\\n        <li *ngIf=\\\"instance.instanceAsDoc\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadDoc()\\\">Download document</button>\\r\\n        </li>\\r\\n        <li *ngIf=\\\"instance.instanceAsXml\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXml()\\\">Download XML</button>\\r\\n        </li>\\r\\n        <li *ngIf=\\\"showDelete()\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Instance</button>\\r\\n        </li>\\r\\n      </ul>\\r\\n    </ba-card>\\r\\n\\r\\n    <div *ngIf=\\\"shouldDisplayIdService\\\">\\r\\n      <service-details-view [shouldShowUpdate]=\\\"showUpdateIdService\\\" (updateAction)=\\\"updateIdService()\\\" [shouldShowDelete]=\\\"false\\\" [isLoading]=\\\"isLoadingIdService\\\" [title]=\\\"titleIdService\\\" [service]=\\\"idService\\\"></service-details-view>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"shouldDisplayCreateButton\\\">\\r\\n      <ba-card title=\\\"{{titleIdService}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n        <ul class=\\\"btn-list clearfix\\\">\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"createIdService()\\\">Create ID Service</button>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </ba-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete instance'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.html\n// module id = ./src/app/pages/org-service-registry/instances/components/instance-details/instance-details.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\r\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\r\n\r\n@Component({\r\n  selector: 'instance-list',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./instance-list.html'),\r\n  styles: []\r\n})\r\nexport class InstanceListComponent implements OnInit {\r\n  public organization: Organization;\r\n  public instances: Array<Instance>;\r\n  public isLoading: boolean;\r\n  public onGotoInstance: Function;\r\n\tpublic cardTitle:string;\r\n  constructor(private route: ActivatedRoute, private router: Router, private notifications: MCNotificationsService, private orgService: OrganizationsService, private instancesService: InstancesService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\t  this.cardTitle = 'Loading ...';\r\n    this.onGotoInstance = this.gotoInstance.bind(this);\r\n\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n    this.loadInstances();\r\n  }\r\n\r\n  private loadInstances() {\r\n    this.instancesService.getAllInstances().subscribe(\r\n      instances => {\r\n        this.instances = instances;\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.isLoading = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get instances', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n\t      //this.cardTitle = 'Instances for ' + organization.name;\r\n\t      this.cardTitle = 'All Instances';\r\n      },\r\n      err => {\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private gotoInstance(index:number) {\r\n    this.router.navigate([this.instances[index].instanceId], {queryParams: { instanceVersion: this.instances[index].version}, relativeTo: this.route })\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <instances-table [instances]=\\\"instances\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onGotoInstance\\\"></instances-table>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.html\n// module id = ./src/app/pages/org-service-registry/instances/components/instance-list/instance-list.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\r\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\r\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {XmlParserService} from \"../../../../../shared/xml-parser.service\";\r\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\r\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\r\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\r\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\r\nimport {IdServicesService} from \"../../../../../backend-api/identity-registry/services/id-services.service\";\r\nimport {InstanceXmlParser} from \"../../../shared/services/instance-xml-parser.service\";\r\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\r\nimport {\r\n\tMcFormControlModel, SelectModel,\r\n\tMcFormControlType, McFormControlModelSelect, McFormControlModelCheckbox\r\n} from \"../../../../../theme/components/mcForm/mcFormControlModel\";\r\nimport {FormGroup, FormControl, Validators, FormBuilder} from \"@angular/forms\";\r\nimport {UrlValidator} from \"../../../../../theme/validators/url.validator\";\r\nimport {ServiceViewModel} from \"../../../../org-identity-registry/services/view-models/ServiceViewModel\";\r\nimport {Service} from \"../../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport {SelectValidator} from \"../../../../../theme/validators/select.validator\";\r\n\r\n@Component({\r\n  selector: 'instance-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./instance-new.html'),\r\n  styles: []\r\n})\r\nexport class InstanceNewComponent implements OnInit {\r\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\r\n\tpublic hasMrnError: boolean = false;\r\n\tpublic mrnErrorText: string;\r\n\r\n  public organization: Organization;\r\n  public labelValues:Array<LabelValueModel>;\r\n  public captionXml = 'Upload Instance Xml file';\r\n  public captionDoc = 'Upload Instance Document file';\r\n  public fileTypeXml = FileUploadType.Xml;\r\n  public fileTypeDoc = FileUploadType.Doc;\r\n  public requiredTextXml = 'You need to upload Xml file';\r\n  public isLoading = true;\r\n\r\n  public isRegistering = false;\r\n  public registerTitle = \"Register Instance\";\r\n  public registerButtonClass = \"btn btn-danger btn-raised\";\r\n  public onRegister: Function;\r\n\r\n  private design:Design;\r\n  private xml:Xml;\r\n  private doc:Doc;\r\n\r\n  private useOIDC:boolean = false;\r\n\tprivate mrn:string = '';\r\n\tprivate name:string = '';\r\n\tpublic registerForm: FormGroup;\r\n\tpublic formControlModels: Array<McFormControlModel>;\r\n\r\n  constructor(private formBuilder: FormBuilder, private xmlParser: InstanceXmlParser, private mrnHelper: MrnHelperService, private activatedRoute: ActivatedRoute, private xmlParserService: XmlParserService, private viewModelService: SrViewModelService, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private designsService: DesignsService, private orgService: OrganizationsService, private instancesService: InstancesService, private idServicesService: IdServicesService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onRegister = this.register.bind(this);\r\n    this.isRegistering = false;\r\n    this.isLoading = true;\r\n    this.generateForm();\r\n    this.loadMyOrganization();\r\n    this.loadDesign();\r\n  }\r\n\r\n  public isFormValid() {\r\n  \tvar oidcTypeValid = true;\r\n\t  let oidcAccessType = this.registerForm.value.oidcAccessType;\r\n\t  if (this.useOIDC && (!oidcAccessType || oidcAccessType.toLowerCase().indexOf('undefined') >= 0)) {\r\n\t\t  oidcTypeValid = false;\r\n\t  }\r\n    return this.xml != null && this.registerForm.valid && oidcTypeValid;\r\n  }\r\n\r\n  public onUploadDoc(file: Doc) {\r\n    this.doc = file;\r\n  }\r\n\r\n  public onUploadXml(file: Xml) {\r\n\t  if (file && this.isXmlValid(file)) {\r\n\t\t  this.xml = file;\r\n\t  }else {\r\n\t\t  this.mrn = '';\r\n\t\t  this.name = '';\r\n\t\t  this.xml = null;\r\n\t\t  this.fileUploadXml.resetFileSelection();\r\n\t\t  this.registerForm.patchValue({mrn: this.mrn});\r\n\t\t  this.registerForm.patchValue({name: this.name});\r\n\t  }\r\n  }\r\n\r\n\tprivate isXmlValid(file: Xml) : boolean {\r\n\t\ttry {\r\n\t\t\tlet mrn = this.xmlParser.getMrn(file);\r\n\t\t\tlet isValid = this.mrnHelper.checkMrnForInstance(mrn);\r\n\t\t\tthis.hasMrnError = !isValid;\r\n\t\t\tif (isValid) {\r\n\t\t\t\tthis.mrn = mrn;\r\n\t\t\t\tthis.name = this.xmlParser.getName(file);\r\n\t\t\t} else {\r\n\t\t\t\tthis.mrn = '';\r\n\t\t\t\tthis.name = '';\r\n\t\t\t\tthis.mrnErrorText = \"The ID in the Xml-file is wrong. The ID is supposed to be an MRN in the following format:<BR>\"\r\n\t\t\t\t\t+ this.mrnHelper.mrnMaskForInstance() + \"'ID'<BR>\"\r\n\t\t\t\t\t+ \"'ID'=\" + this.mrnHelper.mrnPatternError();\r\n\t\t\t}\r\n\t\t\tthis.registerForm.patchValue({mrn: this.mrn});\r\n\t\t\tthis.registerForm.patchValue({name: this.name});\r\n\t\t\treturn isValid;\r\n\t\t} catch ( error ) {\r\n\t\t\tthis.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n  public cancel() {\r\n    this.navigationService.cancelCreateInstance();\r\n  }\r\n\r\n  public register() {\r\n    this.isRegistering = true;\r\n    try {\r\n      var instance:Instance = {};\r\n      instance.instanceAsXml = this.xml;\r\n\t    instance.name = this.xmlParser.getName(this.xml);\r\n\t    instance.description = this.xmlParser.getDescription(this.xml);\r\n\t    instance.instanceId = this.xmlParser.getMrn(this.xml);\r\n\t    instance.keywords = this.xmlParser.getKeywords(this.xml);\r\n\t    instance.status = this.xmlParser.getStatus(this.xml);\r\n\t    instance.organizationId = this.organization.mrn;\r\n\t    instance.version = this.xmlParser.getVersion(this.xml);\r\n      instance.designId = this.design.designId;\r\n\r\n      this.createInstance(instance);\r\n    } catch ( error ) {\r\n      this.isRegistering = false;\r\n      this.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\r\n    }\r\n  }\r\n\r\n  private createInstance(instance:Instance) {\r\n    this.instancesService.createInstance(instance, this.doc).subscribe(\r\n      instanceCreated => {\r\n        this.registerIdService(instanceCreated);\r\n      },\r\n      err => {\r\n        this.isRegistering = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to create instance', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n\tpublic registerIdService(instance:Instance) {\r\n\t\tlet service:Service = {\r\n\t\t\tmrn: this.mrn,\r\n\t\t\tname: this.name,\r\n\t\t\tpermissions: this.registerForm.value.permissions,\r\n\t\t\tcertDomainName: this.registerForm.value.certDomainName\r\n\t\t};\r\n\t\tif (this.useOIDC) {\r\n\t\t\tservice.oidcRedirectUri = this.registerForm.value.oidcRedirectUri;\r\n\t\t\tlet oidcAccessType = this.registerForm.value.oidcAccessType;\r\n\t\t\tif (oidcAccessType && oidcAccessType.toLowerCase().indexOf('undefined') < 0) {\r\n\t\t\t\tservice.oidcAccessType = oidcAccessType;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.createIdService(service, instance);\r\n\t}\r\n  private createIdService(idService:Service, instance:Instance) {\r\n    this.idServicesService.createIdService(idService).subscribe(\r\n      service => {\r\n\t      this.isRegistering = false;\r\n\t      this.navigationService.navigateToOrgInstance(instance.instanceId, instance.version);\r\n      },\r\n      err => {\r\n\t      this.isRegistering = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to create service instance in Identity Registry', MCNotificationType.Error, err);\r\n\t      this.navigationService.navigateToOrgInstance(instance.instanceId, instance.version);\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n      },\r\n      err => {\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadDesign() {\r\n    let designId = this.activatedRoute.snapshot.queryParams['designId'];\r\n    let version = this.activatedRoute.snapshot.queryParams['designVersion'];\r\n    this.designsService.getDesign(designId, version).subscribe(\r\n      design => {\r\n        this.design = design;\r\n        this.labelValues = this.viewModelService.generateLabelValuesForDesign(this.design);\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.isLoading = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get design', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n\tprivate shouldUseOIDC(useOIDC:boolean) {\r\n\t\tthis.useOIDC = useOIDC;\r\n\t\tthis.generateForm();\r\n\t}\r\n\r\n\tprivate generateForm() {\r\n\t\tvar oldForm = this.registerForm;\r\n\t\tthis.registerForm = this.formBuilder.group({});\r\n\t\tif (!oldForm) {\r\n\t\t\toldForm = this.registerForm;\r\n\t\t}\r\n\t\tthis.formControlModels = [];\r\n\r\n\t\tvar formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'mrn', controlType: McFormControlType.Text, labelName: 'MRN', placeholder: 'Upload Instance Xml', isDisabled: true};\r\n\t\tvar formControl = new FormControl(this.mrn, formControlModel.validator);\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'name', controlType: McFormControlType.Text, labelName: 'Name', placeholder: 'Upload Instance Xml', isDisabled: true};\r\n\t\tformControl = new FormControl(this.name, formControlModel.validator);\r\n\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'permissions', controlType: McFormControlType.Text, labelName: 'Permissions', placeholder: ''};\r\n\t\tformControl = new FormControl(oldForm.value.permissions, formControlModel.validator);\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tformControlModel = {formGroup: this.registerForm, elementId: 'certDomainName', controlType: McFormControlType.Text, labelName: 'Certificate domain name', placeholder: ''};\r\n\t\tformControl = new FormControl(oldForm.value.certDomainName, formControlModel.validator);\r\n\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\tlet formControlModelCheckbox:McFormControlModelCheckbox = {state:this.useOIDC, formGroup: this.registerForm, elementId: 'useOIDC', controlType: McFormControlType.Checkbox, labelName: 'Use OpenID Connect (OIDC)'};\r\n\t\tformControl = new FormControl({value: formControlModelCheckbox.state, disabled: false}, formControlModelCheckbox.validator);\r\n\t\tformControl.valueChanges.subscribe(param => this.shouldUseOIDC(param));\r\n\t\tthis.registerForm.addControl(formControlModelCheckbox.elementId, formControl);\r\n\t\tthis.formControlModels.push(formControlModelCheckbox);\r\n\r\n\t\tif (this.useOIDC) {\r\n\t\t\tformControlModel = {formGroup: this.registerForm, elementId: 'oidcRedirectUri', controlType: McFormControlType.Text, labelName: 'OIDC Redirect URI', placeholder: '', validator:Validators.compose([Validators.required, UrlValidator.validate]), errorText:'URI not valid'};\r\n\t\t\tformControl = new FormControl('', formControlModel.validator);\r\n\t\t\tthis.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModel);\r\n\r\n\t\t\tlet formControlModelSelect:McFormControlModelSelect = {selectValues:this.selectValues(), formGroup: this.registerForm, elementId: 'oidcAccessType', controlType: McFormControlType.Select, labelName: 'Access type', placeholder: '', validator:SelectValidator.validate};\r\n\t\t\tformControl = new FormControl('', formControlModelSelect.validator);\r\n\t\t\tthis.registerForm.addControl(formControlModelSelect.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModelSelect);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate selectValues():Array<SelectModel> {\r\n\t\tlet selectValues: Array<SelectModel> = [];\r\n\t\tselectValues.push({value: undefined, label: 'Choose access type...', isSelected: true});\r\n\t\tlet allOidcTypes = ServiceViewModel.getAllOidcAccessTypes();\r\n\t\tallOidcTypes.forEach(oidcType => {\r\n\t\t\tselectValues.push({value: oidcType.value, label: oidcType.label, isSelected: false});\r\n\t\t});\r\n\t\treturn selectValues;\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Register new Instance for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <h5 *ngIf=\\\"design\\\">Registering an instance for this design</h5>\\r\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n\\r\\n      <div class=\\\"separator\\\"></div>\\r\\n\\r\\n      <div *ngIf=\\\"design\\\">\\r\\n        <form>\\r\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" [requiredText]=\\\"requiredTextXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\r\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\r\\n          <div *ngIf=\\\"hasMrnError\\\" class=\\\"mc-form-error\\\" [innerHTML]=\\\"mrnErrorText | undefined | sanitizeHtml\\\"></div>\\r\\n\\r\\n          <mc-form [hideButtons]=\\\"true\\\" [formGroup]=\\\"registerForm\\\" [formControlModels]=\\\"formControlModels\\\" [isLoading]=\\\"isLoading\\\"></mc-form>\\r\\n\\r\\n          <ul class=\\\"btn-list clearfix\\\">\\r\\n            <li>\\r\\n              <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid()\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\r\\n            </li>\\r\\n            <li>\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n            </li>\\r\\n          </ul>\\r\\n        </form>\\r\\n      </div>\\r\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!design && !isLoading\\\">No data</div>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.html\n// module id = ./src/app/pages/org-service-registry/instances/components/instance-new/instance-new.html\n// module chunks = 0","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'instancess',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class InstancesComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/instances.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\n\r\nimport { routing }       from './instances.routing';\r\nimport {NgaModule} from \"../../../theme/nga.module\";\r\nimport {SharedModule} from \"../../shared/shared.module\";\r\nimport {InstancesComponent} from \"./instances.component\";\r\nimport {InstanceListComponent} from \"./components/instance-list/instance-list.component\";\r\nimport {InstanceDetailsComponent} from \"./components/instance-details/instance-details.component\";\r\nimport {InstanceNewComponent} from \"./components/instance-new/instance-new.component\";\r\nimport ServicesModule from \"../../org-identity-registry/services/services.module\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n    SharedModule,\r\n    routing,\r\n\t  ServicesModule\r\n  ],\r\n  declarations: [\r\n    InstancesComponent,\r\n    InstanceListComponent,\r\n    InstanceDetailsComponent,\r\n    InstanceNewComponent\r\n  ]\r\n})\r\nexport default class InstancesModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/instances.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\nimport {InstancesComponent} from \"./instances.component\";\r\nimport {InstanceListComponent} from \"./components/instance-list/instance-list.component\";\r\nimport {InstanceDetailsComponent} from \"./components/instance-details/instance-details.component\";\r\nimport {InstanceNewComponent} from \"./components/instance-new/instance-new.component\";\r\nimport {ServiceNewComponent} from \"../../org-identity-registry/services/components/service-new/service-new.component\";\r\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\r\nimport {ServiceUpdateComponent} from \"../../org-identity-registry/services/components/service-update/service-update.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nexport const routes: Routes = [\r\n  {\r\n    path: 'instances',\r\n    component: InstancesComponent,\r\n    data:{breadcrumb: 'Instances'},\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: InstanceListComponent\r\n      },\r\n\t    {\r\n\t\t    path: 'issuecert',\r\n\t\t    component: CertificateIssueNewComponent,\r\n\t\t    data:{breadcrumb: 'New Certificate'},\r\n\t\t    children: [\r\n\t\t    ]\r\n\t    },\r\n\t    {\r\n\t\t    path: 'register',\r\n\t\t    component: InstanceNewComponent,\r\n\t\t    data:{breadcrumb: 'Register'}\r\n\t    },\r\n\t    {\r\n\t\t    path: 'register-id',\r\n\t\t    component: ServiceNewComponent,\r\n\t\t    data:{breadcrumb: 'Register ID'}\r\n\t    },\r\n      {\r\n        path: ':id',\r\n        component: InstanceDetailsComponent,\r\n        data:{breadcrumb: 'Details'}\r\n      },\r\n\t    {\r\n\t\t    path: 'update-id/:id',\r\n\t\t    component: ServiceUpdateComponent,\r\n\t\t    data:{breadcrumb: 'Update'}\r\n\t    }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/instances/instances.routing.ts","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'org-service-registry',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class OrgServiceRegistryComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/org-service-registry.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport { NgaModule } from '../../theme/nga.module';\r\n\r\nimport { routing }       from './org-service-registry.routing';\r\nimport { OrgServiceRegistryComponent } from './org-service-registry.component';\r\nimport SpecificationsModule from \"./specifications/specifications.module\";\r\nimport DesignsModule from \"./designs/designs.module\";\r\nimport InstancesModule from \"./instances/instances.module\";\r\nimport SrHowToModule from \"./sr-how-to/sr-how-to.module\";\r\nimport {SpecificationXmlParser} from \"./shared/services/specification-xml-parser.service\";\r\nimport {DesignXmlParser} from \"./shared/services/design-xml-parser.service\";\r\nimport {InstanceXmlParser} from \"./shared/services/instance-xml-parser.service\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n    SpecificationsModule,\r\n    DesignsModule,\r\n    InstancesModule,\r\n\t  SrHowToModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    OrgServiceRegistryComponent\r\n  ],\r\n\tproviders: [\r\n\t\tSpecificationXmlParser,\r\n\t\tDesignXmlParser,\r\n\t\tInstanceXmlParser\r\n\t]\r\n})\r\nexport default class OrgServiceRegistryModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/org-service-registry.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\n\r\nimport { OrgServiceRegistryComponent } from './org-service-registry.component';\r\nimport {SpecificationsComponent} from \"./specifications/specifications.component\";\r\nimport {DesignsComponent} from \"./designs/designs.component\";\r\nimport {InstancesComponent} from \"./instances/instances.component\";\r\nimport {SrHowToComponent} from \"./sr-how-to/sr-how-to.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: OrgServiceRegistryComponent,\r\n    children: [\r\n\t    { path: 'howto', component: SrHowToComponent },\r\n\t    { path: 'specifications', component: SpecificationsComponent },\r\n      { path: 'designs', component: DesignsComponent },\r\n      { path: 'instances', component: InstancesComponent }\r\n\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/org-service-registry.routing.ts","import {Injectable} from '@angular/core';\r\nimport {XmlParserService} from \"../../../../shared/xml-parser.service\";\r\nimport {ServiceRegistryXmlParser} from \"./service-registry-xml-parser.service\";\r\n\r\n@Injectable()\r\nexport class DesignXmlParser extends ServiceRegistryXmlParser {\r\n\r\n\tconstructor(xmlParserService: XmlParserService) {\r\n\t\tsuper(xmlParserService);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/design-xml-parser.service.ts","import {Injectable} from '@angular/core';\r\nimport {XmlParserService} from \"../../../../shared/xml-parser.service\";\r\nimport {ServiceRegistryXmlParser} from \"./service-registry-xml-parser.service\";\r\n\r\n@Injectable()\r\nexport class InstanceXmlParser extends ServiceRegistryXmlParser {\r\n\r\n\tconstructor(xmlParserService: XmlParserService) {\r\n\t\tsuper(xmlParserService);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/instance-xml-parser.service.ts","import {Injectable} from '@angular/core';\r\nimport {XmlParserService} from \"../../../../shared/xml-parser.service\";\r\nimport {Xml} from \"../../../../backend-api/service-registry/autogen/model/Xml\";\r\n\r\n@Injectable()\r\nexport class ServiceRegistryXmlParser {\r\n\tconstructor(private xmlParserService: XmlParserService) {\r\n\t}\r\n\r\n\tpublic getName(xml: Xml): string {\r\n\t\treturn this.xmlParserService.getValueFromField('name', xml);\r\n\t}\r\n\r\n\tpublic getDescription(xml: Xml): string {\r\n\t\treturn this.xmlParserService.getValueFromField('description', xml);\r\n\t}\r\n\r\n\tpublic getMrn(xml: Xml): string {\r\n\t\treturn this.xmlParserService.getValueFromField('id', xml);\r\n\t}\r\n\r\n\tpublic getKeywords(xml: Xml): string {\r\n\t\treturn this.xmlParserService.getValueFromField('keywords', xml);\r\n\t}\r\n\r\n\tpublic getStatus(xml: Xml): string {\r\n\t\treturn this.xmlParserService.getValueFromField('status', xml);\r\n\t}\r\n\r\n\tpublic getVersion(xml: Xml): string {\r\n\t\treturn this.xmlParserService.getValueFromField('version', xml);\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/service-registry-xml-parser.service.ts","import {Injectable} from '@angular/core';\r\nimport {ServiceRegistryXmlParser} from \"./service-registry-xml-parser.service\";\r\nimport {XmlParserService} from \"../../../../shared/xml-parser.service\";\r\n\r\n@Injectable()\r\nexport class SpecificationXmlParser extends ServiceRegistryXmlParser {\r\n\r\n\tconstructor(xmlParserService: XmlParserService) {\r\n\t\tsuper(xmlParserService);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/specification-xml-parser.service.ts","import {Injectable, OnInit} from '@angular/core';\r\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\r\n\r\n@Injectable()\r\nexport class SrViewModelService implements OnInit {\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  public generateLabelValuesForSpecification(specification:Specification):Array<LabelValueModel> {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (specification) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'MRN', valueHtml: specification.specificationId});\r\n      labelValues.push({label: 'Name', valueHtml: specification.name});\r\n      labelValues.push({label: 'Version', valueHtml: specification.version});\r\n      labelValues.push({label: 'Status', valueHtml: specification.status});\r\n      labelValues.push({label: 'Description', valueHtml: specification.description});\r\n    }\r\n    return labelValues\r\n  }\r\n\r\n  public generateLabelValuesForDesign(design:Design):Array<LabelValueModel> {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (design) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'MRN', valueHtml: design.designId});\r\n      labelValues.push({label: 'Name', valueHtml: design.name});\r\n      labelValues.push({label: 'Version', valueHtml: design.version});\r\n      labelValues.push({label: 'Status', valueHtml: design.status});\r\n      labelValues.push({label: 'Description', valueHtml: design.description});\r\n    }\r\n    return labelValues;\r\n  }\r\n\r\n  public generateLabelValuesForInstance(instance:Instance):Array<LabelValueModel> {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (instance) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'MRN', valueHtml: instance.instanceId});\r\n      labelValues.push({label: 'Name', valueHtml: instance.name});\r\n      labelValues.push({label: 'Version', valueHtml: instance.version});\r\n      labelValues.push({label: 'Status', valueHtml: instance.status});\r\n      labelValues.push({label: 'Description', valueHtml: instance.description});\r\n      labelValues.push({label: 'Service endpoint', valueHtml: instance.endpointUri});\r\n    }\r\n    return labelValues;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\r\nimport {FileHelperService} from \"../../../../../shared/file-helper.service\";\r\nimport {Design} from \"../../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {DesignsService} from \"../../../../../backend-api/service-registry/services/designs.service\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {InstancesService} from \"../../../../../backend-api/service-registry/services/instances.service\";\r\nimport {Instance} from \"../../../../../backend-api/service-registry/autogen/model/Instance\";\r\nimport {SrViewModelService} from \"../../../shared/services/sr-view-model.service\";\r\nimport {AuthService} from \"../../../../../authentication/services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'specification-details',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./specification-details.html'),\r\n  styles: []\r\n})\r\nexport class SpecificationDetailsComponent {\r\n  public specification: Specification;\r\n  public designs: Array<Design>;\r\n  public instances: Array<Instance>;\r\n  public title:string;\r\n  public labelValues:Array<LabelValueModel>;\r\n  public isLoadingSpecification: boolean;\r\n  public isLoadingDesigns: boolean;\r\n  public isLoadingInstances: boolean;\r\n  public onCreate: Function;\r\n  public onGotoDesign: Function;\r\n  public onGotoInstance: Function;\r\n\tpublic showModal:boolean = false;\r\n\tpublic modalDescription:string;\r\n\r\n  constructor(private authService: AuthService, private route: ActivatedRoute, private router: Router, private viewModelService: SrViewModelService, private navigationHelperService: NavigationHelperService, private instancesService: InstancesService, private notifications: MCNotificationsService, private specificationsService: SpecificationsService, private designsService: DesignsService, private fileHelperService: FileHelperService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onCreate = this.createDesign.bind(this);\r\n    this.onGotoDesign = this.gotoDesign.bind(this);\r\n    this.onGotoInstance = this.gotoInstance.bind(this);\r\n\r\n    this.isLoadingSpecification = true;\r\n    this.isLoadingDesigns = true;\r\n    this.isLoadingInstances = true;\r\n    this.title = 'Loading ...';\r\n    let specificationId = this.route.snapshot.params['id'];\r\n    let version = this.route.snapshot.queryParams['specificationVersion'];\r\n    this.loadSpecification(specificationId, version);\r\n  }\r\n\r\n  public downloadXml() {\r\n    this.fileHelperService.downloadXml(this.specification.specAsXml);\r\n  }\r\n\r\n  public downloadDoc() {\r\n    this.fileHelperService.downloadDoc(this.specification.specAsDoc);\r\n  }\r\n\r\n  private gotoDesign(index:number) {\r\n    this.navigationHelperService.navigateToOrgDesign(this.designs[index].designId, this.designs[index].version);\r\n  }\r\n\r\n  private loadSpecification(specificationId:string, version:string) {\r\n    this.specificationsService.getSpecification(specificationId, version).subscribe(\r\n      specification => {\r\n        this.title = specification.name;\r\n        this.specification = specification;\r\n        this.labelValues = this.viewModelService.generateLabelValuesForSpecification(this.specification);\r\n        this.isLoadingSpecification = false;\r\n        this.loadDesigns();\r\n        this.loadInstances();\r\n      },\r\n      err => {\r\n        // TODO: make this as a general component\r\n        if (err.status == 404) {\r\n          this.router.navigate(['/error404'], {relativeTo: this.route, replaceUrl: true })\r\n        }\r\n        this.title = 'Error while loading';\r\n        this.isLoadingSpecification = false;\r\n        this.isLoadingDesigns = false;\r\n        this.isLoadingInstances = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get specification', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadInstances() {\r\n    this.instancesService.getInstancesForSpecification(this.specification.specificationId, this.specification.version).subscribe(\r\n      instances => {\r\n        this.instances = instances;\r\n        this.isLoadingInstances = false;\r\n      },\r\n      err => {\r\n        this.isLoadingInstances = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get instances', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadDesigns() {\r\n    this.designsService.getDesignsForSpecification(this.specification.specificationId, this.specification.version).subscribe(\r\n      designs => {\r\n        this.designs = designs;\r\n        this.isLoadingDesigns = false;\r\n      },\r\n      err => {\r\n        this.isLoadingDesigns = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get designs', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private createDesign() {\r\n    this.navigationHelperService.navigateToCreateDesign(this.specification.specificationId, this.specification.version);\r\n  }\r\n\r\n  private gotoInstance(index:number) {\r\n    this.navigationHelperService.navigateToOrgInstance(this.instances[index].instanceId, this.instances[index].version);\r\n  }\r\n\r\n\tprivate isMyOrg():boolean {\r\n\t\treturn this.specification.organizationId === this.authService.authState.orgMrn;\r\n\t}\r\n\r\n\tprivate isAdmin():boolean {\r\n\t\treturn (this.authService.authState.isAdmin() && this.isMyOrg()) ||  this.authService.authState.isSiteAdmin();\r\n\t}\r\n\r\n\tpublic shouldDisplayDelete():boolean {\r\n\t\treturn this.isAdmin() && !this.isLoadingDesigns && !this.hasDesigns();\r\n\t}\r\n\r\n\tprivate hasDesigns():boolean {\r\n\t\treturn this.designs && this.designs.length > 0;\r\n\t}\r\n\r\n\tprivate delete() {\r\n\t\tthis.modalDescription = 'Do you want to delete the specification?';\r\n\t\tthis.showModal = true;\r\n\t}\r\n\tpublic cancelModal() {\r\n\t\tthis.showModal = false;\r\n\t}\r\n\r\n\tpublic deleteForSure() {\r\n\t\tthis.isLoadingSpecification = true;\r\n\t\tthis.showModal = false;\r\n\t\tthis.specificationsService.deleteSpecification(this.specification).subscribe(\r\n\t\t\t() => {\r\n\t\t\t\tthis.navigationHelperService.navigateToOrgSpecification('', '');\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoadingSpecification = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to delete specification', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-label-value-table [isLoading]=\\\"isLoadingSpecification\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n      <ul *ngIf=\\\"specification && !isLoadingSpecification\\\" class=\\\"btn-list clearfix\\\">\\r\\n        <li *ngIf=\\\"specification.specAsDoc\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadDoc()\\\">Download document</button>\\r\\n        </li>\\r\\n        <li *ngIf=\\\"specification.specAsXml\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXml()\\\">Download XML</button>\\r\\n        </li>\\r\\n        <li *ngIf=\\\"shouldDisplayDelete()\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Specification</button>\\r\\n        </li>\\r\\n      </ul>\\r\\n\\r\\n      <div class=\\\"separator\\\"></div>\\r\\n\\r\\n      <h5>Designs that implements this Specification</h5>\\r\\n      <designs-table [designs]=\\\"designs\\\" [isLoading]=\\\"isLoadingDesigns\\\" [onRowClick]=\\\"onGotoDesign\\\"></designs-table>\\r\\n      <mc-create-button *ngIf=\\\"!isLoadingDesigns\\\" title=\\\"Register new Design\\\" [onClick]=\\\"onCreate\\\"></mc-create-button>\\r\\n\\r\\n      <!-- Doesn't work atm.\\r\\n      <div class=\\\"separator\\\"></div>\\r\\n\\r\\n      <h5>Instances that implements this Specification</h5>\\r\\n      <instances-table [instances]=\\\"instances\\\" [isLoading]=\\\"isLoadingInstances\\\" [onRowClick]=\\\"onGotoInstance\\\"></instances-table>\\r\\n      -->\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n<mc-modal (onCancel)=\\\"cancelModal()\\\" (onOk)=\\\"deleteForSure()\\\" [show]=\\\"showModal\\\" [title]=\\\"'Delete specification'\\\" [description]=\\\"modalDescription\\\" [cancelClass]=\\\"'btn btn-default btn-raised'\\\" [cancelTitle]=\\\"'Cancel'\\\" [okClass]=\\\"'btn btn-danger btn-raised'\\\" [okTitle]=\\\"'Delete'\\\"></mc-modal>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.html\n// module id = ./src/app/pages/org-service-registry/specifications/components/specification-details/specification-details.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\r\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\n\r\n@Component({\r\n  selector: 'specification-list',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./specification-list.html'),\r\n  styles: []\r\n})\r\nexport class SpecificationListComponent implements OnInit {\r\n  public organization: Organization;\r\n  public specifications: Array<Specification>;\r\n  public isLoading: boolean;\r\n  public onCreate: Function;\r\n  public onGotoSpec: Function;\r\n\tpublic cardTitle:string;\r\n  constructor(private navigationService: NavigationHelperService, private route: ActivatedRoute, private router: Router, private notifications: MCNotificationsService, private orgService: OrganizationsService, private specificationsService: SpecificationsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\t  this.cardTitle = 'Loading ...';\r\n    this.onCreate = this.createSpecification.bind(this);\r\n    this.onGotoSpec = this.gotoSpecification.bind(this);\r\n\r\n    this.isLoading = true;\r\n\r\n    this.loadMyOrganization();\r\n    this.loadSpecifications();\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n\t      // TODO: change when filtering on organization\r\n\t      //this.cardTitle = 'Specifications for ' + organization.name;\r\n\t      this.cardTitle = 'All Specifications';\r\n      },\r\n      err => {\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadSpecifications() {\r\n    this.specificationsService.getAllSpecifications().subscribe(\r\n      specifications => {\r\n        this.specifications = specifications;\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.isLoading = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get specifications', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private createSpecification() {\r\n    this.navigationService.navigateToCreateSpecification();\r\n  }\r\n\r\n  private gotoSpecification(index:number) {\r\n    this.router.navigate([this.specifications[index].specificationId], {queryParams: { specificationVersion: this.specifications[index].version}, relativeTo: this.route })\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{cardTitle}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <specifications-table [specifications]=\\\"specifications\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onGotoSpec\\\"></specifications-table>\\r\\n      <mc-create-button *ngIf=\\\"!isLoading\\\" title=\\\"Register new Specification\\\" [onClick]=\\\"onCreate\\\" ></mc-create-button>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.html\n// module id = ./src/app/pages/org-service-registry/specifications/components/specification-list/specification-list.html\n// module chunks = 0","import {Component, ViewEncapsulation, OnInit, ViewChild} from '@angular/core';\r\nimport {SpecificationsService} from \"../../../../../backend-api/service-registry/services/specifications.service\";\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {FileUploadType, McFileUploader} from \"../../../../../theme/components/mcFileUploader/mcFileUploader.component\";\r\nimport {Doc} from \"../../../../../backend-api/service-registry/autogen/model/Doc\";\r\nimport {Xml} from \"../../../../../backend-api/service-registry/autogen/model/Xml\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {Specification} from \"../../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport * as _ from 'lodash';\r\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\r\nimport {SpecificationXmlParser} from \"../../../shared/services/specification-xml-parser.service\";\r\n\r\n@Component({\r\n  selector: 'specification-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./specification-new.html'),\r\n  styles: []\r\n})\r\nexport class SpecificationNewComponent implements OnInit {\r\n\t@ViewChild('uploadXml')\tpublic fileUploadXml: McFileUploader;\r\n\r\n\tpublic hasMrnError: boolean = false;\r\n\tpublic mrnErrorText: string;\r\n\r\n  public organization: Organization;\r\n  public captionXml = 'Upload Specification Xml file';\r\n  public captionDoc = 'Upload Specification Document file';\r\n  public fileTypeXml = FileUploadType.Xml;\r\n  public fileTypeDoc = FileUploadType.Doc;\r\n  public requiredTextXml = 'You need to upload Xml file';\r\n  public isFormValid = false;\r\n  public isLoading = true;\r\n\r\n  public isRegistering = false;\r\n  public registerTitle = \"Register Specification\";\r\n  public registerButtonClass = \"btn btn-danger btn-raised\";\r\n  public onRegister: Function;\r\n\r\n  private xml:Xml;\r\n  private doc:Doc;\r\n\r\n  constructor(private xmlParser: SpecificationXmlParser, private mrnHelper: MrnHelperService, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private specificationsService: SpecificationsService, private orgService: OrganizationsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onRegister = this.register.bind(this);\r\n    this.isRegistering = false;\r\n    this.loadMyOrganization();\r\n    this.calculateFormValid();\r\n  }\r\n\r\n  public calculateFormValid() {\r\n    this.isFormValid = this.xml != null;\r\n  }\r\n\r\n  public onUploadDoc(file: Doc) {\r\n    this.doc = file;\r\n    this.calculateFormValid();\r\n  }\r\n\r\n  public onUploadXml(file: Xml) {\r\n\t  if (file && this.isXmlValid(file)) {\r\n\t    this.xml = file;\r\n    } else {\r\n\t\t  this.xml = null;\r\n\t  \tthis.fileUploadXml.resetFileSelection();\r\n\t  }\r\n    this.calculateFormValid();\r\n  }\r\n\r\n  private isXmlValid(file: Xml) : boolean {\r\n\t  try {\r\n\t  \tlet mrn = this.xmlParser.getMrn(file);\r\n\t  \tlet isValid = this.mrnHelper.checkMrnForSpecification(mrn);\r\n\t\t  this.hasMrnError = !isValid;\r\n\t\t  if (!isValid) {\r\n\t\t  \tthis.mrnErrorText = \"The ID in the Xml-file is wrong. The ID is supposed to be an MRN in the following format:<BR>\"\r\n\t\t\t\t    + this.mrnHelper.mrnMaskForSpecification() + \"'ID'<BR>\"\r\n\t\t\t\t    + \"'ID'=\" + this.mrnHelper.mrnPatternError();\r\n\t\t  }\r\n\t\t  return isValid;\r\n\t  } catch ( error ) {\r\n\t\t  this.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\r\n\t\t  return false;\r\n\t  }\r\n  }\r\n\r\n  public cancel() {\r\n    this.navigationService.cancelCreateSpecification();\r\n  }\r\n\r\n  public register() {\r\n    this.isRegistering = true;\r\n    try {\r\n      var specification:Specification = {};\r\n      specification.specAsXml = _.cloneDeep(this.xml);\r\n      specification.specAsDoc = this.doc;\r\n      specification.name = this.xmlParser.getName(this.xml);\r\n      specification.description = this.xmlParser.getDescription(this.xml);\r\n      specification.specificationId = this.xmlParser.getMrn(this.xml);\r\n      specification.keywords = this.xmlParser.getKeywords(this.xml);\r\n      specification.status = this.xmlParser.getStatus(this.xml);\r\n      specification.organizationId = this.organization.mrn;\r\n      specification.version = this.xmlParser.getVersion(this.xml);\r\n      this.createSpecification(specification);\r\n    } catch ( error ) {\r\n      this.isRegistering = false;\r\n      this.notifications.generateNotification('Error in XML', error.message, MCNotificationType.Error, error);\r\n    }\r\n  }\r\n\r\n  private createSpecification(specification:Specification) {\r\n    this.specificationsService.createSpecification(specification).subscribe(\r\n      specification => {\r\n        this.isRegistering = false;\r\n        this.navigationService.navigateToOrgSpecification(specification.specificationId, specification.version);\r\n      },\r\n      err => {\r\n        this.isRegistering = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to create specification', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.isLoading = true;\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error);\r\n        this.isLoading = false;\r\n      }\r\n    );\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Register new Specification for {{organization?.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <div *ngIf=\\\"organization?.mrn\\\">\\r\\n        <form>\\r\\n          <mc-file-uploader #uploadXml [caption]=\\\"captionXml\\\" [fileUploadType]=\\\"fileTypeXml\\\" [requiredText]=\\\"requiredTextXml\\\" (onUpload)=\\\"onUploadXml($event)\\\"></mc-file-uploader>\\r\\n          <mc-file-uploader [caption]=\\\"captionDoc\\\" [fileUploadType]=\\\"fileTypeDoc\\\" (onUpload)=\\\"onUploadDoc($event)\\\"></mc-file-uploader>\\r\\n          <div *ngIf=\\\"hasMrnError\\\" class=\\\"mc-form-error\\\" [innerHTML]=\\\"mrnErrorText | undefined | sanitizeHtml\\\"></div>\\r\\n          <ul class=\\\"btn-list clearfix\\\">\\r\\n            <li>\\r\\n              <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\r\\n            </li>\\r\\n            <li>\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n            </li>\\r\\n          </ul>\\r\\n        </form>\\r\\n      </div>\\r\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\r\\n      <div class=\\\"no-data\\\" *ngIf=\\\"!organization?.mrn && !isLoading\\\">No data</div>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.html\n// module id = ./src/app/pages/org-service-registry/specifications/components/specification-new/specification-new.html\n// module chunks = 0","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'specifications',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class SpecificationsComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/specifications.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\n\r\nimport { routing }       from './specifications.routing';\r\nimport {SpecificationsComponent} from \"./specifications.component\";\r\nimport {SpecificationListComponent} from \"./components/specification-list/specification-list.component\";\r\nimport {SpecificationDetailsComponent} from \"./components/specification-details/specification-details.component\";\r\nimport {NgaModule} from \"../../../theme/nga.module\";\r\nimport {SharedModule} from \"../../shared/shared.module\";\r\nimport {SpecificationNewComponent} from \"./components/specification-new/specification-new.component\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n    SharedModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    SpecificationsComponent,\r\n    SpecificationDetailsComponent,\r\n    SpecificationListComponent,\r\n    SpecificationNewComponent\r\n  ]\r\n})\r\nexport default class SpecificationsModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/specifications.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\nimport {SpecificationsComponent} from \"./specifications.component\";\r\nimport {SpecificationListComponent} from \"./components/specification-list/specification-list.component\";\r\nimport {SpecificationDetailsComponent} from \"./components/specification-details/specification-details.component\";\r\nimport {SpecificationNewComponent} from \"./components/specification-new/specification-new.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nconst routes: Routes = [\r\n  {\r\n    path: 'specifications',\r\n    component: SpecificationsComponent,\r\n    data:{breadcrumb: 'Specifications'},\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: SpecificationListComponent\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: SpecificationNewComponent,\r\n        data:{breadcrumb: 'Register'}\r\n      },\r\n      {\r\n        path: ':id',\r\n        component: SpecificationDetailsComponent,\r\n        data:{breadcrumb: 'Details'}\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/specifications/specifications.routing.ts","import {Component, ViewEncapsulation} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sr-how-to',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: require('./sr-how-to.html')\r\n})\r\nexport class SrHowToComponent {\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/sr-how-to/sr-how-to.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Service Registry - How to?\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <h5 style=\\\"margin-bottom: 2px;\\\">Guide on how to make services for the Maritime Cloud - Concepts and how to:</h5>\\r\\n      <a href=\\\"http://maritimecloud.net/docs/Service_Documentation_Guidelines.pdf\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Service Specification Guideline</a>\\r\\n\\r\\n      <h5 style=\\\"margin-bottom: 2px; margin-top: 15px\\\">Service Specification template:</h5>\\r\\n      <a href=\\\"http://maritimecloud.net/docs/Service_Specification_Template.docx\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Download Specification template</a>\\r\\n\\r\\n      <h5 style=\\\"margin-bottom: 2px; margin-top: 15px\\\">Service Technical Design template:</h5>\\r\\n      <a href=\\\"http://maritimecloud.net/docs/Service_Design_Description_Template.docx\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Download Technical Design template</a>\\r\\n\\r\\n      <h5 style=\\\"margin-bottom: 2px; margin-top: 15px\\\">Service Instance template:</h5>\\r\\n      <a href=\\\"http://maritimecloud.net/docs/Service_Implementation_Description_Template.docx\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Download Instance template</a>\\r\\n\\r\\n      <BR/>\\r\\n      <BR/>\\r\\n      If you have any questions or comments please find contact informations on the official <a href=\\\"http://maritimecloud.net\\\" class=\\\"learn-more\\\" target=\\\"_blank\\\">Maritime Cloud Homepage</a>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-service-registry/sr-how-to/sr-how-to.html\n// module id = ./src/app/pages/org-service-registry/sr-how-to/sr-how-to.html\n// module chunks = 0","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport {routing} from \"./sr-how-to.routing\";\r\nimport {SrHowToComponent} from \"./sr-how-to.component\";\r\nimport {SharedModule} from \"../../shared/shared.module\";\r\nimport {NgaModule} from \"../../../theme/nga.module\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    NgaModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    SrHowToComponent\r\n  ]\r\n})\r\nexport default class SrHowToModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/sr-how-to/sr-how-to.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\nimport {SrHowToComponent} from \"./sr-how-to.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nconst routes: Routes = [\r\n  {\r\n    path: 'howto',\r\n    component: SrHowToComponent,\r\n    data:{breadcrumb: 'How To?'},\r\n    children: [\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/sr-how-to/sr-how-to.routing.ts","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\r\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {CertificateEntityType} from \"../../services/certificate-helper.service\";\r\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\r\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\r\nimport {PemCertificate} from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\r\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'certificate-issue-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./certificate-issue-new.html'),\r\n  styles: []\r\n})\r\nexport class CertificateIssueNewComponent implements OnInit {\r\n  public entityType: CertificateEntityType;\r\n  public entityMrn: string;\r\n  public entityTitle: string;\r\n  public isLoading: boolean;\r\n  public pemCertificate: PemCertificate;\r\n\r\n  public labelValues:Array<LabelValueModel>;\r\n\r\n  constructor(private fileHelper: FileHelperService, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isLoading = false;\r\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\r\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\r\n    let entityTitle= this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\r\n    if (entityType == null || !entityMrn || !entityTitle) {\r\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to issue new certificate\", MCNotificationType.Error);\r\n      this.navigationHelper.takeMeHome();\r\n    }\r\n    this.entityMrn = entityMrn;\r\n    this.entityTitle = entityTitle;\r\n    this.entityType = +entityType; // +-conversion from string to int\r\n    this.generateLabelValues();\r\n  }\r\n\r\n  public zipAndDownload() {\r\n    this.fileHelper.downloadPemCertificate(this.pemCertificate, this.entityTitle);\r\n  }\r\n\r\n  public issueNew() {\r\n    this.isLoading = true;\r\n    this.certificateService.issueNewCertificate(this.entityType, this.entityMrn).subscribe(\r\n      pemCertificate => {\r\n        this.pemCertificate = pemCertificate;\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.isLoading = false;\r\n        this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  public cancel() {\r\n    this.navigationHelper.cancelNavigateCertificates();\r\n  }\r\n\r\n  private generateLabelValues() {\r\n    this.labelValues = [];\r\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\r\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn});\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Issue new certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <!-- Before issue -->\\r\\n      <div *ngIf=\\\"entityType != null && !pemCertificate && !isLoading\\\">\\r\\n        <h5>Issuing a new certificate for:</h5>\\r\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"issueNew()\\\">Issue Certificate</button>\\r\\n          </li>\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n\\r\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\r\\n\\r\\n      <!-- After issue and success -->\\r\\n      <div *ngIf=\\\"pemCertificate\\\">\\r\\n        Certificate issued with success\\r\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"zipAndDownload()\\\">Download certificate</button>\\r\\n          </li>\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">OK</button>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module id = ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, HostListener, OnChanges} from '@angular/core';\r\nimport {Certificate} from \"../../../../backend-api/identity-registry/autogen/model/Certificate\";\r\nimport {CertificateEntityType, CertificateHelperService} from \"../../services/certificate-helper.service\";\r\nimport {layoutSizes, DATE_FORMAT} from \"../../../../theme/theme.constants\";\r\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\r\nimport {CertificateViewModel} from \"../../view-models/CertificateViewModel\";\r\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\r\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\r\nimport {PemCertificate} from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\r\nimport {\r\n\tTableHeader, TableRow, TableCell,\r\n\tTableCellActionButtons, TableActionButton\r\n} from \"../../../../theme/components/mcTable/mcTable.component\";\r\nimport {DatePipe} from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: 'certificates-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./certificates-table.html'),\r\n  styles: [require('./certificates-table.scss')]\r\n})\r\nexport class CertificatesTableComponent implements OnChanges{\r\n  @Input() certificates: Array<Certificate>;\r\n  @Input() certificateEntityType: CertificateEntityType;\r\n  @Input() entityMrn: string;\r\n  @Input() isLoading: boolean;\r\n  @Input() certificateTitle: string;\r\n\r\n\tpublic tableHeaders: Array<TableHeader>;\r\n\tpublic tableRows: Array<TableRow>;\r\n  public newCertificateTitle = \"Issue new Certificate\";\r\n  public certificateViewModels: Array<CertificateViewModel>;\r\n  public tableClass:string;\r\n  public onIssueCertificate: Function;\r\n\r\n\tpublic onDownload:Function;\r\n\r\n  constructor(private datePipe: DatePipe, private fileHelper: FileHelperService, private navigationHelper: NavigationHelperService, private authService:AuthService, private certificateHelperService: CertificateHelperService, private notificationService: MCNotificationsService) {\r\n    this.onIssueCertificate = this.issueCertificate.bind(this);\r\n  }\r\n\r\n\tngOnInit() {\r\n\t\tif (!this.authService.authState.rolesLoaded) {\r\n\t\t\tthis.authService.rolesLoaded.subscribe((mode)=> {\r\n\t\t\t\tthis.generateHeadersAndRows();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n  ngOnChanges() {\r\n    if (this.certificates) {\r\n      this.certificateViewModels = this.certificateHelperService.convertCertificatesToViewModels(this.certificates);\r\n      this.sortCertificates();\r\n\t    this.generateHeadersAndRows();\r\n    }\r\n  }\r\n\tprivate generateHeadersAndRows() {\r\n\t\tvar tableHeaders: Array<TableHeader> = [];\r\n\t\tvar tableRows: Array<TableRow> = [];\r\n\r\n\t\tvar tableHeader: TableHeader = {title:'Certificate', class:''};\r\n\t\ttableHeaders.push(tableHeader);\r\n\r\n\t\ttableHeader = {title:'Valid from', class:'nowrap'};\r\n\t\ttableHeaders.push(tableHeader);\r\n\r\n\t\ttableHeader = {title:'Valid to', class:'nowrap'};\r\n\t\ttableHeaders.push(tableHeader);\r\n\r\n\t\ttableHeader = {title:'', class:'table-buttons'};\r\n\t\ttableHeaders.push(tableHeader);\r\n\r\n\t\tfor (let certificate of this.certificateViewModels) {\r\n\t\t\tvar cells:Array<TableCell> = [];\r\n\r\n\t\t\tvar tableCell: TableCell = {valueHtml:'Certificate for ' + this.certificateTitle, class:'', truncateNumber:50};\r\n\t\t\tcells.push(tableCell);\r\n\r\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.start, DATE_FORMAT), class:'nowrap', truncateNumber:0};\r\n\t\t\tcells.push(tableCell);\r\n\r\n\t\t\ttableCell = {valueHtml:this.datePipe.transform(certificate.end, DATE_FORMAT), class:'nowrap', truncateNumber:0};\r\n\t\t\tcells.push(tableCell);\r\n\r\n\t\t\tif (certificate.revoked) {\r\n\t\t\t\ttableCell = {valueHtml:'Revoked (' + certificate.revokeReasonText + ')', class:'red-text', truncateNumber:50};\r\n\t\t\t\tcells.push(tableCell);\r\n\t\t\t} else {\r\n\t\t\t\tlet actionButtons:Array<TableActionButton> = [];\r\n\t\t\t\tlet actionButton:TableActionButton = {buttonClass: 'btn btn-primary btn-raised btn-sm', name: 'Download certificate', onClick:() => {this.download(certificate)}};\r\n\t\t\t\tactionButtons.push(actionButton);\r\n\t\t\t\tif (this.isAdmin()) {\r\n\t\t\t\t\tactionButton = {buttonClass: 'btn btn-danger btn-raised btn-sm', name: 'Revoke certificate', onClick:() => {this.revoke(certificate)}};\r\n\t\t\t\t\tactionButtons.push(actionButton);\r\n\t\t\t\t}\r\n\t\t\t\tlet tableCellActionButtons: TableCellActionButtons = {valueHtml:'', class:'table-buttons', truncateNumber:0, actionButtons:actionButtons};\r\n\t\t\t\tcells.push(tableCellActionButtons);\r\n\t\t\t}\r\n\r\n\t\t\tlet tableRow: TableRow = {cells: cells};\r\n\t\t\ttableRows.push(tableRow);\r\n\t\t}\r\n\r\n\t\tthis.tableHeaders = tableHeaders;\r\n\t\tthis.tableRows = tableRows;\r\n\t}\r\n  private sortCertificates() {\r\n    // We are sorting with longest due date on top\r\n    this.certificateViewModels.sort((obj1: CertificateViewModel, obj2: CertificateViewModel) => {\r\n      var obj1Time:number;\r\n      var obj2Time:number;\r\n      // Why is this needed??? for some reason sometimes the obj.end is a number and not a Date???\r\n      if (typeof obj1.end === \"Date\") {\r\n        obj1Time = obj1.end.getTime();\r\n      } else {\r\n        obj1Time = obj1.end;\r\n      }\r\n      if (typeof obj2.end === \"Date\") {\r\n        obj2Time = obj2.end.getTime();\r\n      } else {\r\n        obj2Time = obj2.end;\r\n      }\r\n\r\n      if (obj1.revoked && obj2.revoked) {\r\n        return obj2Time - obj1Time;\r\n      }\r\n      if (obj1.revoked) {\r\n        return 1;\r\n      }\r\n      if (obj2.revoked) {\r\n        return -1;\r\n      }\r\n      return obj2Time - obj1Time;\r\n    });\r\n  }\r\n\r\n  public issueCertificate() {\r\n    this.navigationHelper.navigateToIssueNewCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle);\r\n  }\r\n\r\n  public isAdmin():boolean {\r\n    return this.authService.authState.isAdmin();\r\n  }\r\n\r\n  public revoke(certificate:Certificate) {\r\n    this.notificationService.generateNotification('Not Implemented', 'Revoke coming soon', MCNotificationType.Info);\r\n  }\r\n\r\n  public download(certificate:Certificate) {\r\n    let pemCertificate:PemCertificate = {certificate:certificate.certificate};\r\n    this.fileHelper.downloadPemCertificate(pemCertificate, this.certificateTitle);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\"></mc-table>\\r\\n<div *ngIf=\\\"!isLoading\\\">\\r\\n  <mc-create-button [title]=\\\"newCertificateTitle\\\" [onClick]=\\\"onIssueCertificate\\\"></mc-create-button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module chunks = 0 1 2 3 4","module.exports = \".table-buttons {\\n  width: 100%; }\\n  .table-buttons button {\\n    margin: 5px !important; }\\n\\n.certificate-table td {\\n  vertical-align: middle; }\\n\\n.certificate-table td:first-child {\\n  white-space: nowrap; }\\n\\n.certificate-table-short td {\\n  vertical-align: middle; }\\n\\n.certificate-table-short td:first-child {\\n  min-width: 200px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\r\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\r\n\r\n@Component({\r\n  selector: 'designs-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./designs-table.html'),\r\n  styles: []\r\n})\r\nexport class DesignsTableComponent implements OnChanges {\r\n  @Input() designs: Array<Design>;\r\n  @Input() isLoading: boolean;\r\n  @Input() onRowClick: (index:number) => void;\r\n  public tableHeaders: Array<TableHeader>;\r\n  public tableRows: Array<TableRow>;\r\n  constructor() {\r\n  }\r\n  ngOnInit() {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.designs) {\r\n      this.generateHeadersAndRows();\r\n    }\r\n  }\r\n  private generateHeadersAndRows() {\r\n    var tableHeaders: Array<TableHeader> = [];\r\n    var tableRows: Array<TableRow> = [];\r\n\r\n    var tableHeader: TableHeader = {title:'Name', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Version', class:'nowrap align-center'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Status', class:'nowrap'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Description', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    for (let design of this.designs) {\r\n      var cells:Array<TableCell> = [];\r\n\r\n      var tableCell: TableCell = {valueHtml:design.name, class:'', truncateNumber:50};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:design.version, class:'nowrap align-center', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:design.status, class:'nowrap', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:design.description, class:'table-description', truncateNumber:250};\r\n      cells.push(tableCell);\r\n\r\n      let tableRow: TableRow = {cells: cells};\r\n      tableRows.push(tableRow);\r\n    }\r\n\r\n    this.tableHeaders = tableHeaders;\r\n    this.tableRows = tableRows;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/designs-table/designs-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/designs-table/designs-table.html\n// module id = ./src/app/pages/shared/components/designs-table/designs-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\r\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\r\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\r\n\r\n@Component({\r\n  selector: 'instances-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./instances-table.html'),\r\n  styles: []\r\n})\r\nexport class InstancesTableComponent implements OnChanges {\r\n  @Input() instances: Array<Instance>;\r\n  @Input() isLoading: boolean;\r\n  @Input() onRowClick: (index:number) => void;\r\n  public tableHeaders: Array<TableHeader>;\r\n  public tableRows: Array<TableRow>;\r\n  constructor() {\r\n  }\r\n  ngOnInit() {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.instances) {\r\n      this.generateHeadersAndRows();\r\n    }\r\n  }\r\n  private generateHeadersAndRows() {\r\n    var tableHeaders: Array<TableHeader> = [];\r\n    var tableRows: Array<TableRow> = [];\r\n\r\n    var tableHeader: TableHeader = {title:'Name', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Version', class:'nowrap align-center'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Status', class:'nowrap'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Description', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    for (let instance of this.instances) {\r\n      var cells:Array<TableCell> = [];\r\n\r\n      var tableCell: TableCell = {valueHtml:instance.name, class:'', truncateNumber:50};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:instance.version, class:'nowrap align-center', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:instance.status, class:'nowrap', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:instance.description, class:'table-description', truncateNumber:250};\r\n      cells.push(tableCell);\r\n\r\n      let tableRow: TableRow = {cells: cells};\r\n      tableRows.push(tableRow);\r\n    }\r\n\r\n    this.tableHeaders = tableHeaders;\r\n    this.tableRows = tableRows;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/instances-table/instances-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/instances-table/instances-table.html\n// module id = ./src/app/pages/shared/components/instances-table/instances-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges, Output, EventEmitter} from '@angular/core';\r\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {OrganizationViewModelService} from \"../../services/organization-view-model.service\";\r\nimport {LogoService} from \"../../../../backend-api/identity-registry/services/logo.service\";\r\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\r\n\r\n@Component({\r\n  selector: 'organization-details-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./organization-details-table.html'),\r\n  styles: []\r\n})\r\nexport class OrganizationDetailsTableComponent implements OnChanges {\r\n  private labelValues:Array<LabelValueModel>;\r\n\t@Input() displayLogo:boolean = true;\r\n  @Input() isLoading:boolean;\r\n\t@Input() organization: Organization;\r\n\t@Output() onLogoLoaded: EventEmitter<any> = new EventEmitter<any>();\r\n\tpublic logo:string;\r\n\tpublic canChangeLogo:boolean;\r\n\tpublic isLoadingOrgAndLogo:boolean = true;\r\n\tpublic uploadingLogo:boolean = false;\r\n  constructor(private authService:AuthService, private logoService: LogoService, private orgViewModelService: OrganizationViewModelService, private notifications:MCNotificationsService) {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.organization) {\r\n\t    this.canChangeLogo = this.canChangeTheLogo();\r\n\t    this.loadLogo();\r\n    }\r\n  }\r\n  public uploadLogo(logo:any) {\r\n\t  let oldLogo = this.logo;\r\n\t  this.uploadingLogo = true;\r\n\t  this.logoService.uploadLogo(this.organization.mrn, logo).subscribe(\r\n\t\t  logo => {\r\n\t\t\t  this.loadLogo();\r\n\t\t  },\r\n\t\t  err => {\r\n\t\t\t  this.logo = oldLogo;\r\n\t\t\t  this.uploadingLogo = false;\r\n\t\t\t  this.notifications.generateNotification('Error', 'Error when trying to upload logo', MCNotificationType.Error, err);\r\n\t\t  }\r\n\t  );\r\n  }\r\n\r\n  private setLabelValues() {\r\n\t  this.labelValues = this.orgViewModelService.generateLabelValuesForOrganization(this.organization);\r\n\t  this.isLoadingOrgAndLogo = false;\r\n  }\r\n\r\n\tprivate loadLogo(){\r\n\t\tthis.logoService.getLogoForOrganization(this.organization.mrn).subscribe(\r\n\t\t\tlogo => {\r\n\t\t\t\tthis.logo = URL.createObjectURL(new Blob([logo]));\r\n\t\t\t\tthis.setLabelValues();\r\n\t\t\t\tthis.uploadingLogo = false;\r\n\t\t\t\tthis.onLogoLoaded.emit('');\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tif (this.canChangeTheLogo()) {\r\n\t\t\t\t\tthis.logo = 'assets/img/no_organization.png';\r\n\t\t\t\t}\r\n\t\t\t\tthis.setLabelValues();\r\n\t\t\t\tthis.uploadingLogo = false;\r\n\t\t\t\tthis.onLogoLoaded.emit('');\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\tprivate canChangeTheLogo():boolean {\r\n\t\treturn ( (this.authService.authState.isAdmin() && this.authService.isMyOrg(this.organization.mrn)) || this.authService.authState.isSiteAdmin());\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","module.exports = \"<div *ngIf=\\\"displayLogo && logo\\\" style=\\\"margin-bottom: 10px;\\\">\\r\\n  <img class=\\\"logo-image-no-center\\\" [attr.src]=\\\"logo | sanitizeUrl\\\" *ngIf=\\\"logo && !canChangeLogo\\\">\\r\\n  <mc-logo-uploader [logo]=\\\"logo\\\" [uploadingLogo]=\\\"uploadingLogo\\\" (onUpload)=\\\"uploadLogo($event)\\\" *ngIf=\\\"logo && canChangeLogo\\\"></mc-logo-uploader>\\r\\n</div>\\r\\n<mc-label-value-table [isLoading]=\\\"isLoadingOrgAndLogo\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module id = ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, Output, EventEmitter} from '@angular/core';\r\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {Service} from \"../../../../backend-api/identity-registry/autogen/model/Service\";\r\nimport {CertificateEntityType} from \"../../services/certificate-helper.service\";\r\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\r\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\r\nimport {ServiceViewModel} from \"../../../org-identity-registry/services/view-models/ServiceViewModel\";\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\r\nimport {IdServicesService} from \"../../../../backend-api/identity-registry/services/id-services.service\";\r\n\r\n@Component({\r\n  selector: 'service-details-view',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./service-details-view.html'),\r\n  styles: []\r\n})\r\nexport class ServiceDetailsViewComponent {\r\n\t@Input() service:Service;\r\n\t@Input() shouldShowDelete:boolean = true;\r\n\t@Input() shouldShowUpdate:boolean = true;\r\n\t@Input() isLoading:boolean;\r\n\t@Input() title:string;\r\n\r\n\t@Output() deleteAction:EventEmitter<any> = new EventEmitter<any>();\r\n\t@Output() updateAction:EventEmitter<any> = new EventEmitter<any>();\r\n\r\n\tpublic labelValues:Array<LabelValueModel>;\r\n\tpublic entityType: CertificateEntityType;\r\n\tconstructor(private fileHelperService:FileHelperService, private authService: AuthService, private servicesService: IdServicesService, private notifications:MCNotificationsService) {\r\n\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.entityType = CertificateEntityType.Service;\r\n\t}\r\n\r\n\tngOnChanges() {\r\n\t\tif (this.service) {\r\n\t\t\tthis.generateLabelValues();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic downloadXML() {\r\n\t\tthis.servicesService.getIdServiceJbossXml(this.service.mrn).subscribe(\r\n\t\t\txmlString => {\r\n\t\t\t\tthis.fileHelperService.downloadFile(xmlString, 'text/xml', 'keycloak-oidc-subsystem.xml');\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the XML', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tpublic downloadJSON() {\r\n\t\tthis.servicesService.getServiceKeycloakJson(this.service.mrn).subscribe(\r\n\t\t\tjsonString => {\r\n\t\t\t\tthis.fileHelperService.downloadFile(jsonString, 'text/json', 'keycloak.json');\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to download the JSON', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tpublic generateLabelValues() {\r\n\t\tthis.labelValues = [];\r\n\t\tif (this.service) {\r\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.service.mrn});\r\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.service.name});\r\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.service.permissions});\r\n\t\t\tthis.labelValues.push({label: 'Certificate domain name', valueHtml: this.service.certDomainName});\r\n\t\t\tif (this.service.oidcRedirectUri) {\r\n\t\t\t\tthis.labelValues.push({label: 'OIDC Redirect URI', valueHtml: this.service.oidcRedirectUri});\r\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client ID', valueHtml: this.service.oidcClientId});\r\n\t\t\t\tthis.labelValues.push({label: 'OIDC Client Secret', valueHtml: this.service.oidcClientSecret});\r\n\t\t\t\tthis.labelValues.push({label: 'Access type', valueHtml: ServiceViewModel.getLabelForEnum(this.service.oidcAccessType)});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic showDelete():boolean {\r\n\t\treturn this.shouldShowDelete && this.isAdmin() && this.service != null;\r\n\t}\r\n\r\n\tpublic showUpdate():boolean {\r\n\t\treturn this.shouldShowUpdate && this.isAdmin() && this.service != null;\r\n\t}\r\n\r\n\tprivate isAdmin() {\r\n\t\treturn this.authService.authState.isAdmin();\r\n\t}\r\n\r\n\tprivate delete() {\r\n\t\tthis.deleteAction.emit('');\r\n\t}\r\n\r\n\tprivate update() {\r\n\t\tthis.updateAction.emit('');\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/service-details-view/service-details-view.component.ts","module.exports = \"<ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n  <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n  <ul *ngIf=\\\"!isLoading && service && (this.service.oidcRedirectUri || showDelete() || showUpdate())\\\" class=\\\"btn-list clearfix\\\">\\r\\n    <li *ngIf=\\\"this.service.oidcRedirectUri\\\">\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadXML()\\\">Download JBOSS XML</button>\\r\\n    </li>\\r\\n    <li *ngIf=\\\"this.service.oidcRedirectUri\\\">\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"downloadJSON()\\\">Download Keycloak JSON</button>\\r\\n    </li>\\r\\n    <li *ngIf=\\\"showUpdate()\\\">\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"update()\\\">Update</button>\\r\\n    </li>\\r\\n    <li *ngIf=\\\"showDelete()\\\">\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"delete()\\\">Delete Service</button>\\r\\n    </li>\\r\\n  </ul>\\r\\n</ba-card>\\r\\n\\r\\n<div *ngIf=\\\"service\\\">\\r\\n  <ba-card title=\\\"Certificates for {{service.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n    <certificates-table [entityMrn]=\\\"service.mrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"service.name\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"service.certificates\\\"></certificates-table>\\r\\n  </ba-card>\\r\\n</div>\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module id = ./src/app/pages/shared/components/service-details-view/service-details-view.html\n// module chunks = 0 1 2 3 4","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\r\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\r\n\r\n@Component({\r\n  selector: 'specifications-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./specifications-table.html'),\r\n  styles: []\r\n})\r\nexport class SpecificationsTableComponent implements OnChanges {\r\n  @Input() specifications: Array<Specification>;\r\n  @Input() isLoading: boolean;\r\n  @Input() onRowClick: (index:number) => void;\r\n  public tableHeaders: Array<TableHeader>;\r\n  public tableRows: Array<TableRow>;\r\n  constructor() {\r\n  }\r\n  ngOnInit() {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.specifications) {\r\n      this.generateHeadersAndRows();\r\n    }\r\n  }\r\n  private generateHeadersAndRows() {\r\n    var tableHeaders: Array<TableHeader> = [];\r\n    var tableRows: Array<TableRow> = [];\r\n\r\n    var tableHeader: TableHeader = {title:'Name', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Version', class:'nowrap align-center'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Status', class:'nowrap'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Description', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    for (let specification of this.specifications) {\r\n      var cells:Array<TableCell> = [];\r\n\r\n      var tableCell: TableCell = {valueHtml:specification.name, class:'', truncateNumber:50};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:specification.version, class:'nowrap align-center', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:specification.status, class:'nowrap', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:specification.description, class:'table-description', truncateNumber:250};\r\n      cells.push(tableCell);\r\n\r\n      let tableRow: TableRow = {cells: cells};\r\n      tableRows.push(tableRow);\r\n    }\r\n\r\n    this.tableHeaders = tableHeaders;\r\n    this.tableRows = tableRows;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module id = ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module chunks = 0 1 2 3 4","import {Injectable, OnInit} from '@angular/core';\r\nimport {Organization} from \"../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {LabelValueModel} from \"../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\n\r\n@Injectable()\r\nexport class OrganizationViewModelService implements OnInit {\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n  public generateLabelValuesForOrganization(organization:Organization):Array<LabelValueModel>  {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (organization) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'MRN', valueHtml: organization.mrn});\r\n\t    labelValues.push({label: 'Name', valueHtml: organization.name});\r\n      labelValues.push({label: 'Address', valueHtml: organization.address});\r\n      labelValues.push({label: 'Country', valueHtml: organization.country});\r\n      if (organization.email) {\r\n        labelValues.push({label: 'Email', valueHtml: \"<a href='mailto:\" + organization.email + \"'>\" + organization.email + \"</a>\"});\r\n      }\r\n      if (organization.url) {\r\n        labelValues.push({label: 'Website', valueHtml: \"<a href='\" + organization.url + \"' target='_blank'>\" + organization.url + \"</a>\"});\r\n      }\r\n    }\r\n    return labelValues;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/organization-view-model.service.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport {DesignsTableComponent} from \"./components/designs-table/designs-table.component\";\r\nimport {SpecificationsTableComponent} from \"./components/specifications-table/specifications-table.component\";\r\nimport {NgaModule} from \"../../theme/nga.module\";\r\nimport {InstancesTableComponent} from \"./components/instances-table/instances-table.component\";\r\nimport {SrViewModelService} from \"../org-service-registry/shared/services/sr-view-model.service\";\r\nimport {CertificatesTableComponent} from \"./components/certificates-table/certificates-table.component\";\r\nimport {CertificateHelperService} from \"./services/certificate-helper.service\";\r\nimport {OrganizationDetailsTableComponent} from \"./components/organizaton-details-table/organization-details-table.component\";\r\nimport {OrganizationViewModelService} from \"./services/organization-view-model.service\";\r\nimport {CertificateIssueNewComponent} from \"./components/certificate-issue-new/certificate-issue-new.component\";\r\nimport {ServiceDetailsViewComponent} from \"./components/service-details-view/service-details-view.component\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule\r\n  ],\r\n  declarations: [\r\n    DesignsTableComponent,\r\n    InstancesTableComponent,\r\n    SpecificationsTableComponent,\r\n    CertificatesTableComponent,\r\n    OrganizationDetailsTableComponent,\r\n    CertificateIssueNewComponent,\r\n\t  ServiceDetailsViewComponent\r\n  ],\r\n  exports: [\r\n    OrganizationDetailsTableComponent,\r\n    DesignsTableComponent,\r\n    InstancesTableComponent,\r\n    SpecificationsTableComponent,\r\n    CertificatesTableComponent,\r\n    CertificateIssueNewComponent,\r\n\t  ServiceDetailsViewComponent\r\n  ],\r\n  providers: [\r\n    SrViewModelService,\r\n    CertificateHelperService,\r\n    OrganizationViewModelService\r\n  ]\r\n})\r\nexport class SharedModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/shared.module.ts","export interface EnumKeyValue {\r\n\tkey:any;\r\n\tvalue:any;\r\n}\r\n\r\n\r\nexport class EnumsHelper {\r\n\tpublic static getKeysAndValuesFromEnum(myEnum:any):Array<EnumKeyValue> {\r\n\t\tlet enumKeysAndValues:Array<EnumKeyValue> = [];\r\n\t\tlet keysAndValues:Array<any> = [];\r\n\t\tfor (let enumValue in myEnum) {\r\n\t\t\tlet enumsKeysAndValuesLength = keysAndValues.length;\r\n\r\n\t\t\tif (enumsKeysAndValuesLength === 0) {\r\n\t\t\t\tkeysAndValues.push([enumValue, myEnum[enumValue]]);\r\n\t\t\t\tenumKeysAndValues.push({key:enumValue, value: myEnum[enumValue]});\r\n\t\t\t} else {\r\n\t\t\t\tif (keysAndValues[enumsKeysAndValuesLength - 1][1] !== enumValue) {\r\n\t\t\t\t\tkeysAndValues.push([enumValue, myEnum[enumValue]]);\r\n\t\t\t\t\tenumKeysAndValues.push({key:enumValue, value: myEnum[enumValue]});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn enumKeysAndValues;\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/shared/enums-helper.ts"],"mappings":";;;;;;AAAA;;;;;;;;;;AAUA;;AAwCA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;ACxDA;;;;;;;;;;AAUA;;AAoDA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;;ACpEA;AACA;AACA;AAEA;AASA;AAMA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAxDA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAoDA;;AAAA;AAnDA;;;;;;;;ACbA;;;;;;;;;ACAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwEA;;AAAA;AAvEA;;;;;;;;ACjBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AASA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAMA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlLA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8KA;;AAAA;AA7KA;;;;;;;;ACzBA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AASA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1LA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsLA;;AAAA;AArLA;;;;;;;;ACxBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AAAA;AACA;AApBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AC7CA;AACA;AACA;AAOA;AAAA;AA6CA;AA1CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA7CA;;;;;;;;;;ACTA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAayIA;;AAAA;AAxIA;;;;;;;;ACrBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AASA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AApDA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAiDA;;AAAA;AAhDA;;;;;;;;ACdA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAQA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtvIA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA0IA;;AAAA;AAzIA;;;;;;;;ACzBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AC/BA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAMA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AA/KA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA2KA;;AAAA;AA1KA;;;;;;;;ACvBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AApDA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAiDA;;AAAA;AAhDA;;;;;;;;ACdA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAQA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtPA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyPA;;AAAA;AAxPA;;;;;;;;ACnCA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAAA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACnDA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AAAA;AACA;AApBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACnCA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;ACvBA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AALA;AAAA;;AAAA;AAMA;;AAAA;AALA;;;;;;;;;;ACLA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AALA;AAAA;;AAAA;AAMA;;AAAA;AALA;;;;;;;;;;ACLA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA3BA;AAAA;;AAAA;AA4BA;;AAAA;AA3BA;;;;;;;;;;ACLA;AACA;AACA;AAGA;AAAA;AAEA;AACA;AACA;AALA;AAAA;;AAAA;AAMA;;AAAA;AALA;;;;;;;;;;ACLA;AAOA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAAA;;AAAA;AAgDA;AAAA;AA/CA;;;;;;;;;;ACPA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAejJA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA6IA;;AAAA;AA5IA;;;;;;;;ACrBA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AAQA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA5DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyDA;;AAAA;AAxDA;;;;;;;;ACfA;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAQA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AArHA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAwHA;;AAAA;AAvHA;;;;;;;;ACpBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AC/BA;AAQA;AAGA;AACA;AAEA;AAEA;AAdA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAUA;AAAA;AATA;;;;;;;;ACRA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;AClBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;ACdA;AACA;AACA;AACA;AAGA;AAGA;AASA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuDA;;AAAA;AAtDA;;;;;;;;AClBA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAQA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAQA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AA3BA;AADA;AAAA;;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAjIA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAoIA;;AAAA;AAnIA;;;;;;;;ACtBA;;;;;;;ACAA;;;;;;;;;ACAA;AAUA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsDA;AAAA;AArDA;;;;;;;;ACVA;;;;;;;;;ACAA;AAUA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsDA;AAAA;AArDA;;;;;;;;ACVA;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAUA;AAAA;AAAA;AAAA;AAAA;AARA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAxDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA4DA;;AAAA;AA3DA;;;;;;;;ACdA;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAYA;AAAA;AAAA;AAAA;AAAA;AAVA;AACA;AAIA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnFA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAdA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsFA;;AAAA;AArFA;;;;;;;;AChBA;;;;;;;;;ACAA;AAUA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsDA;AAAA;AArDA;;;;;;;;ACVA;;;;;;;;;ACAA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;;AAAA;AAyBA;AAAA;AAxBA;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AAAA;AACA;AA9BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;;;;;;ACtCA;AAAA;AAmBA;AAlBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnBA;;;;;","sourceRoot":""}