{"version":3,"file":"1.chunk.js","sources":["webpack:///./src/app/backend-api/identity-registry/autogen/model/Organization.ts?2cd9","webpack:///./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-details/device-details.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html","webpack:///./src/app/pages/org-identity-registry/devices/components/device-list/device-list.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html","webpack:///./src/app/pages/org-identity-registry/devices/components/device-new/device-new.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html","webpack:///./src/app/pages/org-identity-registry/devices/devices.component.ts","webpack:///./src/app/pages/org-identity-registry/devices/devices.module.ts","webpack:///./src/app/pages/org-identity-registry/devices/devices.routing.ts","webpack:///./src/app/pages/org-identity-registry/org-identity-registry.component.ts","webpack:///./src/app/pages/org-identity-registry/org-identity-registry.module.ts","webpack:///./src/app/pages/org-identity-registry/org-identity-registry.routing.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html","webpack:///./src/app/pages/org-identity-registry/vessels/vessels.component.ts","webpack:///./src/app/pages/org-identity-registry/vessels/vessels.module.ts","webpack:///./src/app/pages/org-identity-registry/vessels/vessels.routing.ts","webpack:///./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts","webpack:///./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts?ef3a","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts?53b6","webpack:///./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html?9ab8","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.component.ts?5f5d","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.html?947c","webpack:///./src/app/pages/shared/components/certificates-table/certificates-table.scss?89ae","webpack:///./src/app/pages/shared/components/designs-table/designs-table.component.ts?7abc","webpack:///./src/app/pages/shared/components/designs-table/designs-table.html?4ed3","webpack:///./src/app/pages/shared/components/instances-table/instances-table.component.ts?6cf2","webpack:///./src/app/pages/shared/components/instances-table/instances-table.html?c375","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts?e2c8","webpack:///./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html?0ef1","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.component.ts?d0a3","webpack:///./src/app/pages/shared/components/specifications-table/specifications-table.html?334b","webpack:///./src/app/pages/shared/services/organization-view-model.service.ts?e7fe","webpack:///./src/app/pages/shared/shared.module.ts?b542","webpack:///./src/app/shared/enums-helper.ts"],"sourcesContent":["/**\r\n * Maritime Cloud Identity Registry API\r\n * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.\r\n *\r\n * OpenAPI spec version: 0.0.1\r\n * Contact: info@maritimecloud.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n'use strict';\r\nimport * as models from './models';\r\n\r\nexport interface Organization {\r\n    \r\n\r\n    address?: string;\r\n\r\n    /**\r\n     * Cannot be created/updated by editing in the model. Use the dedicate create and revoke calls.\r\n     */\r\n    certificates?: Array<models.Certificate>;\r\n\r\n    country?: string;\r\n\r\n    createdAt?: Date;\r\n\r\n    email?: string;\r\n\r\n    identityProviderAttributes?: Array<models.IdentityProviderAttribute>;\r\n\r\n    /**\r\n     * The Maritime Resource Name\r\n     */\r\n    mrn?: string;\r\n\r\n    /**\r\n     * The name of the organization\r\n     */\r\n    name?: string;\r\n\r\n    updatedAt?: Date;\r\n\r\n    url?: string;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/Organization.ts","/**\r\n * Maritime Cloud Identity Registry API\r\n * Maritime Cloud Identity Registry API can be used for managing entities in the Maritime Cloud.\r\n *\r\n * OpenAPI spec version: 0.0.1\r\n * Contact: info@maritimecloud.net\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n'use strict';\r\nimport * as models from './models';\r\n\r\nexport interface VesselAttribute {\r\n\r\n\r\n    /**\r\n     * Vessel attribute name\r\n     */\r\n    attributeName?: VesselAttribute.AttributeNameEnum;\r\n\r\n    /**\r\n     * Vessel attribute value\r\n     */\r\n    attributeValue?: string;\r\n\r\n    createdAt?: Date;\r\n\r\n    end?: Date;\r\n\r\n    start?: Date;\r\n\r\n    updatedAt?: Date;\r\n}\r\nexport namespace VesselAttribute {\r\n\r\n    export enum AttributeNameEnum {\r\n        imo_number = <any> 'imo-number',\r\n        mmsi_number = <any> 'mmsi-number',\r\n        callsign = <any> 'callsign',\r\n        flagstate = <any> 'flagstate',\r\n        ais_class = <any> 'ais-class',\r\n        port_of_register = <any> 'port-of-register',\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/backend-api/identity-registry/autogen/model/VesselAttribute.ts","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport {Device} from \"../../../../../backend-api/identity-registry/autogen/model/Device\";\r\nimport {CertificateEntityType} from \"../../../../shared/services/certificate-helper.service\";\r\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {DevicesService} from \"../../../../../backend-api/identity-registry/services/devices.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\n\r\n@Component({\r\n  selector: 'device-details',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./device-details.html'),\r\n  styles: []\r\n})\r\nexport class DeviceDetailsComponent {\r\n\tpublic labelValues:Array<LabelValueModel>;\r\n\tpublic title:string;\r\n\tpublic isLoading:boolean;\r\n\tpublic device:Device;\r\n\tpublic entityType: CertificateEntityType;\r\n\tpublic certificateTitle: string;\r\n\tconstructor(private route: ActivatedRoute, private devicesService: DevicesService, private notifications:MCNotificationsService) {\r\n\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.entityType = CertificateEntityType.Device;\r\n\t\tthis.loadVessel();\r\n\t}\r\n\r\n\tprivate loadVessel() {\r\n\t\tthis.isLoading = true;\r\n\t\tlet mrn = this.route.snapshot.params['id'];\r\n\t\tthis.devicesService.getDevice(mrn).subscribe(\r\n\t\t\tdevice => {\r\n\t\t\t\tthis.device = device;\r\n\t\t\t\tthis.title = device.name;\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.generateLabelValues();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the device', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tpublic generateLabelValues() {\r\n\t\tthis.labelValues = [];\r\n\t\tif (this.device) {\r\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.device.mrn});\r\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.device.name});\r\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.device.permissions});\r\n\t\t}\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/components/device-details/device-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n    </ba-card>\\r\\n\\r\\n    <div *ngIf=\\\"device\\\">\\r\\n      <ba-card title=\\\"Certificates for {{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n        <certificates-table [entityMrn]=\\\"device.mrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"title\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"device.certificates\\\"></certificates-table>\\r\\n      </ba-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html\n// module id = ./src/app/pages/org-identity-registry/devices/components/device-details/device-details.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {EntityImageModel} from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\r\nimport {Device} from \"../../../../../backend-api/identity-registry/autogen/model/Device\";\r\nimport {DevicesService} from \"../../../../../backend-api/identity-registry/services/devices.service\";\r\nimport {AuthService} from \"../../../../../authentication/services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'device-list',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./device-list.html'),\r\n  styles: []\r\n})\r\nexport class DeviceListComponent implements OnInit {\r\n\tprivate KEY_NEW = 'KEY_NEW_DEVICE';\r\n\tprivate devices:Array<Device>;\r\n\tpublic entityImageList: Array<EntityImageModel>;\r\n  public organization: Organization;\r\n  public isLoading: boolean;\r\n  constructor(private authService: AuthService, private router:Router, private route:ActivatedRoute, private devicesService: DevicesService, private orgService: OrganizationsService, private notifications:MCNotificationsService) {\r\n    this.organization = {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n\t  this.loadDevices();\r\n  }\r\n\r\n\tprivate loadMyOrganization() {\r\n\t\tthis.orgService.getMyOrganization().subscribe(\r\n\t\t\torganization => {\r\n\t\t\t\tthis.organization = organization;\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprivate loadDevices() {\r\n\t\tthis.devicesService.getDevices().subscribe(\r\n\t\t\tdevices => {\r\n\t\t\t\tthis.devices = devices;\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.generateEntityImageList();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get devices', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tpublic gotoDetails(entityModel:EntityImageModel) {\r\n\t\tif (entityModel.entityId === this.KEY_NEW) {\r\n\t\t\tthis.gotoCreate();\r\n\t\t} else {\r\n\t\t\tthis.router.navigate([entityModel.entityId], {relativeTo: this.route});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic gotoCreate() {\r\n\t\tthis.router.navigate(['register'], {relativeTo: this.route})\r\n\t}\r\n\r\n  private generateEntityImageList() {\r\n\t  this.entityImageList = [];\r\n\t  if (this.devices) {\r\n\t\t  let imageSrc = 'assets/img/no_device.svg';\r\n\t\t  this.devices.forEach(device => {\r\n\t\t\t    this.entityImageList.push({imageSource:imageSrc, entityId:device.mrn, title:device.name});\r\n\t\t\t  }\r\n\t\t  );\r\n\t  }\r\n\t  if (this.authService.authState.isAdmin()) {\r\n\t\t  this.entityImageList.push({imageSource:'', entityId:this.KEY_NEW, title:'Register new Device', isAdd:true});\r\n\t  }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/components/device-list/device-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Devices for {{organization.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html\n// module id = ./src/app/pages/org-identity-registry/devices/components/device-list/device-list.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Device} from \"../../../../../backend-api/identity-registry/autogen/model/Device\";\r\n\r\n\r\n@Component({\r\n  selector: 'device-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./device-new.html'),\r\n  styles: []\r\n})\r\nexport class DeviceNewComponent implements OnInit {\r\n  public organization: Organization;\r\n  public isFormValid = false;\r\n  public isLoading = true;\r\n\r\n  public isRegistering = false;\r\n  public registerTitle = \"Register Device\";\r\n  public registerButtonClass = \"btn btn-danger btn-raised\";\r\n  public onRegister: Function;\r\n\r\n  constructor(private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService) {\r\n    this.organization = {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onRegister = this.register.bind(this);\r\n    this.isRegistering = false;\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n  }\r\n\r\n  public calculateFormValid() {\r\n    this.isFormValid = false;\r\n  }\r\n\r\n  public cancel() {\r\n    this.navigationService.cancelCreateDevice();\r\n  }\r\n\r\n  public register() {\r\n    this.isRegistering = true;\r\n    let device:Device = {};\r\n    this.createDevice(device);\r\n  }\r\n\r\n  private createDevice(device:Device) {\r\n\t  this.notifications.generateNotification('Not Implemented', 'Register coming soon', MCNotificationType.Info);\r\n   /*\r\n    this.designsService.createDesign(design).subscribe(\r\n      design => {\r\n        this.navigationService.navigateToOrgDesign(design.designId, design.version);\r\n        this.isRegistering = false;\r\n      },\r\n      err => {\r\n        this.isRegistering = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to create design', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n    */\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n        this.calculateFormValid();\r\n\t      this.isLoading = false;\r\n      },\r\n      err => {\r\n\t      this.isLoading = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/components/device-new/device-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Register new Device for {{organization.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <div *ngIf=\\\"!isLoading\\\">\\r\\n        Not implemented yet. Coming soon\\r\\n        <ul class=\\\"btn-list clearfix\\\">\\r\\n          <li>\\r\\n            <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"!isFormValid\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\r\\n          </li>\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html\n// module id = ./src/app/pages/org-identity-registry/devices/components/device-new/device-new.html\n// module chunks = 1","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'devices',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class DevicesComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/devices.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\n\r\nimport { routing }       from './devices.routing';\r\nimport {DevicesComponent} from \"./devices.component\";\r\nimport {DeviceListComponent} from \"./components/device-list/device-list.component\";\r\nimport {DeviceDetailsComponent} from \"./components/device-details/device-details.component\";\r\nimport {NgaModule} from \"../../../theme/nga.module\";\r\nimport {SharedModule} from \"../../shared/shared.module\";\r\nimport {DeviceNewComponent} from \"./components/device-new/device-new.component\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n    SharedModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    DevicesComponent,\r\n    DeviceDetailsComponent,\r\n    DeviceListComponent,\r\n\t  DeviceNewComponent\r\n  ]\r\n})\r\nexport default class DevicesModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/devices.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\nimport {DevicesComponent} from \"./devices.component\";\r\nimport {DeviceListComponent} from \"./components/device-list/device-list.component\";\r\nimport {DeviceDetailsComponent} from \"./components/device-details/device-details.component\";\r\nimport {DeviceNewComponent} from \"./components/device-new/device-new.component\";\r\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nconst routes: Routes = [\r\n  {\r\n    path: 'devices',\r\n    component: DevicesComponent,\r\n    data:{breadcrumb: 'Devices'},\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: DeviceListComponent\r\n      },\r\n\t    {\r\n\t\t    path: 'issuecert',\r\n\t\t    component: CertificateIssueNewComponent,\r\n\t\t    data:{breadcrumb: 'New Certificate'},\r\n\t\t    children: [\r\n\t\t    ]\r\n\t    },\r\n\t    {\r\n\t\t    path: 'register',\r\n\t\t    component: DeviceNewComponent,\r\n\t\t    data:{breadcrumb: 'Register'}\r\n\t    },\r\n      {\r\n        path: ':id',\r\n        component: DeviceDetailsComponent,\r\n        data:{breadcrumb: 'Details'}\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/devices/devices.routing.ts","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'org-identity-registry',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class OrgIdentityRegistryComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/org-identity-registry.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport { NgaModule } from '../../theme/nga.module';\r\n\r\nimport { routing }       from './org-identity-registry.routing';\r\nimport { OrgIdentityRegistryComponent } from './org-identity-registry.component';\r\nimport VesselsModule from \"./vessels/vessels.module\";\r\nimport DevicesModule from \"./devices/devices.module\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n\t  VesselsModule,\r\n\t  DevicesModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    OrgIdentityRegistryComponent\r\n  ]\r\n})\r\nexport default class OrgIdentityRegistryModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/org-identity-registry.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\n\r\nimport { OrgIdentityRegistryComponent } from './org-identity-registry.component';\r\nimport {VesselsComponent} from \"./vessels/vessels.component\";\r\nimport {DevicesComponent} from \"./devices/devices.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: OrgIdentityRegistryComponent,\r\n    children: [\r\n\t    { path: 'devices', component: DevicesComponent },\r\n\t    { path: 'vessels', component: VesselsComponent }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/org-identity-registry.routing.ts","import { Component, ViewEncapsulation } from '@angular/core';\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\r\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\r\nimport {LabelValueModel} from \"../../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {VesselViewModel} from \"../../view-models/VesselViewModel\";\r\nimport {CertificateEntityType} from \"../../../../shared/services/certificate-helper.service\";\r\n\r\n@Component({\r\n  selector: 'vessel-details',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./vessel-details.html'),\r\n  styles: []\r\n})\r\nexport class VesselDetailsComponent {\r\n\tpublic labelValues:Array<LabelValueModel>;\r\n\tpublic title:string;\r\n\tpublic isLoading:boolean;\r\n\tpublic vesselViewModel:VesselViewModel;\r\n\tpublic vessel:Vessel;\r\n\tpublic entityType: CertificateEntityType;\r\n\tpublic certificateTitle: string;\r\n  constructor(private route: ActivatedRoute, private vesselsService: VesselsService, private notifications:MCNotificationsService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n\t  this.entityType = CertificateEntityType.Vessel;\r\n\t  this.loadVessel();\r\n  }\r\n\r\n\tprivate loadVessel() {\r\n\t\tthis.isLoading = true;\r\n\t\tlet mrn = this.route.snapshot.params['id'];\r\n\t\tthis.vesselsService.getVessel(mrn).subscribe(\r\n\t\t\tvessel => {\r\n\t\t\t\tthis.vessel = vessel;\r\n\t\t\t\tthis.vesselViewModel = new VesselViewModel(vessel);\r\n\t\t\t\tthis.title = vessel.name;\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.generateLabelValues();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get the vessel', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tpublic generateLabelValues() {\r\n\t\tthis.labelValues = [];\r\n\t\tif (this.vesselViewModel) {\r\n\t\t\tthis.labelValues.push({label: 'MRN', valueHtml: this.vesselViewModel.getVessel().mrn});\r\n\t\t\tthis.labelValues.push({label: 'Name', valueHtml: this.vesselViewModel.getVessel().name});\r\n\t\t\tthis.labelValues.push({label: 'Permissions', valueHtml: this.vesselViewModel.getVessel().permissions});\r\n\t\t\tlet attributeViewModels = this.vesselViewModel.getAttributeViewModels();\r\n\t\t\tattributeViewModels.forEach(attributeViewModel => {\r\n\t\t\t\tthis.labelValues.push({label: attributeViewModel.attributeNameText, valueHtml: attributeViewModel.attributeValue});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"{{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n    </ba-card>\\r\\n\\r\\n    <div *ngIf=\\\"vessel\\\">\\r\\n        <ba-card title=\\\"Certificates for {{title}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n            <certificates-table [entityMrn]=\\\"vessel.mrn\\\" [isLoading]=\\\"isLoading\\\" [certificateTitle]=\\\"title\\\" [certificateEntityType]=\\\"entityType\\\" [certificates]=\\\"vessel.certificates\\\"></certificates-table>\\r\\n        </ba-card>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html\n// module id = ./src/app/pages/org-identity-registry/vessels/components/vessel-details/vessel-details.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../../shared/mc-notifications.service\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\r\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\r\nimport {EntityImageModel} from \"../../../../../theme/components/mcEntityImage/mcEntityImage.component\";\r\nimport {AuthService} from \"../../../../../authentication/services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'vessel-list',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./vessel-list.html'),\r\n  styles: []\r\n})\r\nexport class VesselListComponent implements OnInit {\r\n\tprivate KEY_NEW = 'KEY_NEW_VESSEL';\r\n\tprivate vessels:Array<Vessel>;\r\n\tpublic entityImageList: Array<EntityImageModel>;\r\n  public organization: Organization;\r\n  public isLoading: boolean;\r\n  constructor(private authService: AuthService, private router:Router, private route:ActivatedRoute, private vesselsService: VesselsService, private orgService: OrganizationsService, private notifications:MCNotificationsService) {\r\n    this.organization = {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n\t  this.loadVessels();\r\n  }\r\n\r\n\tprivate loadMyOrganization() {\r\n\t\tthis.orgService.getMyOrganization().subscribe(\r\n\t\t\torganization => {\r\n\t\t\t\tthis.organization = organization;\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tprivate loadVessels() {\r\n\t\tthis.vesselsService.getVessels().subscribe(\r\n\t\t\tvessels => {\r\n\t\t\t\tthis.vessels = vessels;\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.generateEntityImageList();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\tthis.isLoading = false;\r\n\t\t\t\tthis.notifications.generateNotification('Error', 'Error when trying to get vessels', MCNotificationType.Error, err);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n  public gotoDetails(entityModel:EntityImageModel) {\r\n\t  if (entityModel.entityId === this.KEY_NEW) {\r\n\t\t  this.gotoCreate();\r\n\t  } else {\r\n\t    this.router.navigate([entityModel.entityId], {relativeTo: this.route});\r\n\t  }\r\n  }\r\n\r\n  public gotoCreate() {\r\n\t  this.router.navigate(['register'], {relativeTo: this.route})\r\n  }\r\n\r\n  private generateEntityImageList() {\r\n\t  this.entityImageList = [];\r\n\t  if (this.vessels) {\r\n\t\t  let imageSrc = 'assets/img/no_ship.png';\r\n\t\t  this.vessels.forEach(vessel => {\r\n\t\t\t    this.entityImageList.push({imageSource:imageSrc, entityId:vessel.mrn, title:vessel.name});\r\n\t\t\t  }\r\n\t\t  );\r\n\t  }\r\n\t  if (this.authService.authState.isAdmin()) {\r\n\t\t  this.entityImageList.push({imageSource:'', entityId:this.KEY_NEW, title:'Register new Vessel', isAdd:true});\r\n\t  }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Vessels for {{organization.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <mc-entity-image-list [isLoading]=\\\"isLoading\\\" [entityImageList]=\\\"entityImageList\\\" (onClick)=\\\"gotoDetails($event)\\\"></mc-entity-image-list>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html\n// module id = ./src/app/pages/org-identity-registry/vessels/components/vessel-list/vessel-list.html\n// module chunks = 1","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Organization} from \"../../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {NavigationHelperService} from \"../../../../../shared/navigation-helper.service\";\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../../shared/mc-notifications.service\";\r\nimport {OrganizationsService} from \"../../../../../backend-api/identity-registry/services/organizations.service\";\r\nimport {Vessel} from \"../../../../../backend-api/identity-registry/autogen/model/Vessel\";\r\nimport {FormGroup, Validators, FormBuilder, FormControl} from \"@angular/forms\";\r\nimport {McFormControlModel} from \"../../../../../theme/components/mcFormControl/mcFormControl.component\";\r\nimport {VesselViewModel, VesselAttributeViewModel} from \"../../view-models/VesselViewModel\";\r\nimport {VesselAttribute} from \"../../../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\r\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\r\nimport {VesselsService} from \"../../../../../backend-api/identity-registry/services/vessels.service\";\r\nimport {MrnHelperService} from \"../../../../../shared/mrn-helper.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'vessel-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./vessel-new.html'),\r\n  styles: []\r\n})\r\nexport class VesselNewComponent implements OnInit {\r\n\tprivate mrn: string;\r\n\tprivate mrnMask:string;\r\n\tprivate mrnPattern:string;\r\n\tprivate mrnPatternError:string;\r\n\r\n  public organization: Organization;\r\n  public isLoading = true;\r\n\r\n  public isRegistering = false;\r\n  public registerTitle = \"Register Vessel\";\r\n  public registerButtonClass = \"btn btn-danger btn-raised\";//TODO den skal bare væk sammen med buttons\r\n  public onRegister: Function;\r\n\r\n\tpublic registerForm: FormGroup;\r\n\tpublic formControlModels: Array<McFormControlModel>;\r\n\r\n  constructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private navigationService: NavigationHelperService, private notifications: MCNotificationsService, private orgService: OrganizationsService, private vesselsService: VesselsService, mrnHelper: MrnHelperService) {\r\n    this.organization = {};\r\n\t  this.mrnMask = mrnHelper.mrnMaskForVessel();\r\n\t  this.mrnPattern = mrnHelper.mrnPattern();\r\n\t  this.mrnPatternError = mrnHelper.mrnPatternError();\r\n\t  this.mrn = this.mrnMask;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onRegister = this.register.bind(this);\r\n    this.isRegistering = false;\r\n    this.isLoading = true;\r\n    this.loadMyOrganization();\r\n  }\r\n\r\n  public cancel() {\r\n    this.navigationService.cancelCreateVessel();\r\n  }\r\n\r\n  public register() {\r\n    this.isRegistering = true;\r\n    let vessel:Vessel = {};\r\n\t  vessel.mrn = this.mrn;\r\n\t  vessel.name = this.registerForm.value.name;\r\n\t  vessel.permissions = this.registerForm.value.permissions;\r\n\r\n\t  let formAttributes = this.registerForm.value.attributes;\r\n\t  let vesselAttributes:Array<VesselAttribute> = [];\r\n\t  Object.getOwnPropertyNames(formAttributes).forEach(propertyName => {\r\n\t\t  if (formAttributes[propertyName] && formAttributes[propertyName].length > 0) {\r\n\t\t\t  vesselAttributes.push({attributeName: AttributeNameEnum[propertyName], attributeValue: formAttributes[propertyName]});\r\n\t\t  }\r\n\t  });\r\n\t\tvessel.attributes = vesselAttributes;\r\n    this.createVessel(vessel);\r\n  }\r\n\r\n  private createVessel(vessel:Vessel) {\r\n    this.vesselsService.createVessel(vessel).subscribe(\r\n      vessel => {\r\n        this.navigationService.navigateToVessel(vessel.mrn);\r\n        this.isRegistering = false;\r\n      },\r\n      err => {\r\n        this.isRegistering = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to create vessel', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadMyOrganization() {\r\n    this.orgService.getMyOrganization().subscribe(\r\n      organization => {\r\n        this.organization = organization;\r\n\t      this.generateForm();\r\n\t      this.isLoading = false;\r\n      },\r\n      err => {\r\n\t      this.isLoading = false;\r\n        this.notifications.generateNotification('Error', 'Error when trying to get organization', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n\tprivate generateMRN(idValue:string) {\r\n\t\tlet valueNoSpaces = idValue.split(' ').join('').toLowerCase();\r\n\t\tthis.mrn = this.mrnMask + valueNoSpaces;\r\n\t\tthis.registerForm.patchValue({mrn: this.mrn});\r\n\t}\r\n\r\n  private generateForm() {\r\n\t  this.registerForm = this.formBuilder.group({});\r\n\t  this.formControlModels = [];\r\n\r\n\t  var formControlModel:McFormControlModel = {formGroup: this.registerForm, elementId: 'mrn', inputType: 'text', labelName: 'MRN', placeholder: '', isDisabled: true};\r\n\t  var formControl = new FormControl(this.mrn, formControlModel.validator);\r\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t  this.formControlModels.push(formControlModel);\r\n\r\n\t  formControlModel = {formGroup: this.registerForm, elementId: 'vesselId', inputType: 'text', labelName: 'Vessel ID', placeholder: 'Vessel ID is required', validator:Validators.required, pattern:this.mrnPattern, errorText:this.mrnPatternError};\r\n\t  formControl = new FormControl('', formControlModel.validator);\r\n\t  formControl.valueChanges.subscribe(param => this.generateMRN(param));\r\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t  this.formControlModels.push(formControlModel);\r\n\r\n\t  formControlModel = {formGroup: this.registerForm, elementId: 'name', inputType: 'text', labelName: 'Name', placeholder: 'Name is required', validator:Validators.required};\r\n\t  formControl = new FormControl('', formControlModel.validator);\r\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t  this.formControlModels.push(formControlModel);\r\n\r\n\t  formControlModel = {formGroup: this.registerForm, elementId: 'permissions', inputType: 'text', labelName: 'Permissions', placeholder: ''};\r\n\t  formControl = new FormControl('', formControlModel.validator);\r\n\t  this.registerForm.addControl(formControlModel.elementId, formControl);\r\n\t  this.formControlModels.push(formControlModel);\r\n\r\n\t  this.generateAttributesGroup();\r\n  }\r\n\r\n  private generateAttributesGroup() {\r\n    let attributesGroup = this.formBuilder.group({});\r\n\t  this.registerForm.addControl('attributes', attributesGroup);\r\n\r\n\t  let vesselAttributes:Array<VesselAttributeViewModel> = VesselViewModel.getAllPossibleVesselAttributes();\r\n\t\tvesselAttributes.forEach(vesselAttribute => {\r\n\t\t\tlet formControlModel:McFormControlModel = {formGroup: attributesGroup, elementId: AttributeNameEnum[vesselAttribute.attributeName], inputType: 'text', labelName: vesselAttribute.attributeNameText, placeholder: ''};\r\n\t\t\tlet formControl = new FormControl('', formControlModel.validator);\r\n\t\t\tattributesGroup.addControl(formControlModel.elementId, formControl);\r\n\t\t\tthis.formControlModels.push(formControlModel);\r\n\t\t});\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Register new Vessel for {{organization.name}}\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <div *ngIf=\\\"!isLoading\\\">\\r\\n        <form [formGroup]=\\\"registerForm\\\">\\r\\n          <div *ngFor=\\\"let formControlModel of formControlModels\\\">\\r\\n            <mc-form-control [formControlModel]=\\\"formControlModel\\\"></mc-form-control>\\r\\n          </div>\\r\\n          <ul class=\\\"btn-list clearfix\\\">\\r\\n            <li>\\r\\n              <mc-loading-button [class]=\\\"registerButtonClass\\\" [disabled]=\\\"registerForm.invalid\\\" [isLoading]=\\\"isRegistering\\\" [title]=\\\"registerTitle\\\" [onClick]=\\\"onRegister\\\" ></mc-loading-button>\\r\\n            </li>\\r\\n            <li>\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n            </li>\\r\\n          </ul>\\r\\n        </form>\\r\\n      </div>\\r\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html\n// module id = ./src/app/pages/org-identity-registry/vessels/components/vessel-new/vessel-new.html\n// module chunks = 1","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'vessels',\r\n  template: `<router-outlet></router-outlet>`\r\n})\r\nexport class VesselsComponent {\r\n  constructor() {\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/vessels.component.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\n\r\nimport { routing }       from './vessels.routing';\r\nimport {VesselsComponent} from \"./vessels.component\";\r\nimport {VesselListComponent} from \"./components/vessel-list/vessel-list.component\";\r\nimport {VesselDetailsComponent} from \"./components/vessel-details/vessel-details.component\";\r\nimport {NgaModule} from \"../../../theme/nga.module\";\r\nimport {SharedModule} from \"../../shared/shared.module\";\r\nimport {VesselNewComponent} from \"./components/vessel-new/vessel-new.component\";\r\nimport {ReactiveFormsModule, FormsModule} from \"@angular/forms\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule,\r\n\t  FormsModule,\r\n\t  ReactiveFormsModule,\r\n    SharedModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    VesselsComponent,\r\n    VesselDetailsComponent,\r\n    VesselListComponent,\r\n\t  VesselNewComponent\r\n  ]\r\n})\r\nexport default class VesselsModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/vessels.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\nimport {VesselsComponent} from \"./vessels.component\";\r\nimport {VesselListComponent} from \"./components/vessel-list/vessel-list.component\";\r\nimport {VesselDetailsComponent} from \"./components/vessel-details/vessel-details.component\";\r\nimport {VesselNewComponent} from \"./components/vessel-new/vessel-new.component\";\r\nimport {CertificateIssueNewComponent} from \"../../shared/components/certificate-issue-new/certificate-issue-new.component\";\r\n\r\n// noinspection TypeScriptValidateTypes\r\nconst routes: Routes = [\r\n  {\r\n    path: 'vessels',\r\n    component: VesselsComponent,\r\n    data:{breadcrumb: 'Vessels'},\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: VesselListComponent\r\n      },\r\n\t    {\r\n\t\t    path: 'issuecert',\r\n\t\t    component: CertificateIssueNewComponent,\r\n\t\t    data:{breadcrumb: 'New Certificate'},\r\n\t\t    children: [\r\n\t\t    ]\r\n\t    },\r\n\t    {\r\n\t\t    path: 'register',\r\n\t\t    component: VesselNewComponent,\r\n\t\t    data:{breadcrumb: 'Register'}\r\n\t    },\r\n      {\r\n        path: ':id',\r\n        component: VesselDetailsComponent,\r\n        data:{breadcrumb: 'Details'}\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/vessels.routing.ts","import {Vessel} from \"../../../../backend-api/identity-registry/autogen/model/Vessel\";\r\nimport {VesselAttribute} from \"../../../../backend-api/identity-registry/autogen/model/VesselAttribute\";\r\nimport AttributeNameEnum = VesselAttribute.AttributeNameEnum;\r\nimport {EnumsHelper} from \"../../../../shared/enums-helper\";\r\n\r\nexport interface VesselAttributeViewModel extends VesselAttribute {\r\n\tattributeNameText?:string;\r\n}\r\n\r\n// TODO maybe this should just be a helper.service instead. Or mayby just static methods if no objects is needed\r\nexport class VesselViewModel {\r\n\tprivate attributes:Array<VesselAttributeViewModel>;\r\n\tprivate vessel:Vessel;\r\n\tconstructor(vessel:Vessel) {\r\n\t\tthis.vessel = vessel;\r\n\t\tthis.generateAttributes();\r\n\t}\r\n\r\n\tpublic static getAllPossibleVesselAttributes(): Array<VesselAttributeViewModel> {\r\n\t\tlet attributes:Array<VesselAttributeViewModel> = [];\r\n\r\n\t\tlet attributeKeysAndValues = EnumsHelper.getKeysAndValuesFromEnum(AttributeNameEnum);\r\n\t\tattributeKeysAndValues.forEach(enumKeyAndValue => {\r\n\t\t\tlet vesselAttribute:VesselAttributeViewModel = {};\r\n\t\t\tvesselAttribute.attributeName = enumKeyAndValue.value;\r\n\t\t\tvesselAttribute.attributeNameText = VesselViewModel.getTextForVesselAttributeNameEnum(enumKeyAndValue.value);\r\n\t\t\tattributes.push(vesselAttribute);\r\n\t\t});\r\n\t\treturn attributes;\r\n\t}\r\n\r\n\tpublic static convertVesselsToViewModels(vessels:Array<Vessel>):Array<VesselViewModel> {\r\n\t\tlet viewModels:Array<VesselViewModel> = [];\r\n\t\tif (vessels) {\r\n\t\t\tvessels.forEach(vessel => {\r\n\t\t\t\tviewModels.push(new VesselViewModel(vessel));\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn viewModels;\r\n\t}\r\n\r\n\tpublic getVessel():Vessel {\r\n\t\treturn this.vessel;\r\n\t}\r\n\r\n\tpublic getAttributeViewModels():Array<VesselAttributeViewModel> {\r\n\t\treturn this.attributes;\r\n\t}\r\n\r\n\tprivate generateAttributes() {\r\n\t\tthis.attributes = [];\r\n\t\tif (this.vessel.attributes) {\r\n\t\t\tthis.vessel.attributes.forEach(attribute => {\r\n\t\t\t\tthis.attributes.push(this.attributeViewModelFromAttribute(attribute));\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprivate attributeViewModelFromAttribute(attribute:VesselAttribute): VesselAttributeViewModel {\r\n\t\tlet attributeViewModel: VesselAttributeViewModel = attribute;\r\n\t\tattributeViewModel.attributeNameText = VesselViewModel.getTextForVesselAttributeNameEnum(attribute.attributeName);\r\n\t\treturn attributeViewModel;\r\n\t}\r\n\r\n\r\n\tprivate static getTextForVesselAttributeNameEnum(vesselAttributeEnum:AttributeNameEnum):string {\r\n\t\tvar text = '';\r\n\t\tswitch (vesselAttributeEnum) {\r\n\t\t\tcase AttributeNameEnum.ais_class: {\r\n\t\t\t\ttext = 'AIS class';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AttributeNameEnum.callsign: {\r\n\t\t\t\ttext = 'Call sign';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AttributeNameEnum.flagstate: {\r\n\t\t\t\ttext = 'Flag state';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AttributeNameEnum.imo_number: {\r\n\t\t\t\ttext = 'IMO number';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AttributeNameEnum.mmsi_number: {\r\n\t\t\t\ttext = 'MMSI number';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase AttributeNameEnum.port_of_register: {\r\n\t\t\t\ttext = 'Port of register';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault : {\r\n\t\t\t\ttext = AttributeNameEnum[vesselAttributeEnum];\r\n\t\t\t\tif (!text) {\r\n\t\t\t\t\ttext = ''+ vesselAttributeEnum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-identity-registry/vessels/view-models/VesselViewModel.ts","import {Injectable, OnInit} from '@angular/core';\r\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\r\n\r\n@Injectable()\r\nexport class SrViewModelService implements OnInit {\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  public generateLabelValuesForSpecification(specification:Specification):Array<LabelValueModel> {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (specification) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'ID', valueHtml: specification.specificationId});\r\n      labelValues.push({label: 'Name', valueHtml: specification.name});\r\n      labelValues.push({label: 'Version', valueHtml: specification.version});\r\n      labelValues.push({label: 'Status', valueHtml: specification.status});\r\n      labelValues.push({label: 'Description', valueHtml: specification.description});\r\n    }\r\n    return labelValues\r\n  }\r\n\r\n  public generateLabelValuesForDesign(design:Design):Array<LabelValueModel> {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (design) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'ID', valueHtml: design.designId});\r\n      labelValues.push({label: 'Name', valueHtml: design.name});\r\n      labelValues.push({label: 'Version', valueHtml: design.version});\r\n      labelValues.push({label: 'Status', valueHtml: design.status});\r\n      labelValues.push({label: 'Description', valueHtml: design.description});\r\n    }\r\n    return labelValues;\r\n  }\r\n\r\n  public generateLabelValuesForInstance(instance:Instance):Array<LabelValueModel> {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (instance) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'ID', valueHtml: instance.instanceId});\r\n      labelValues.push({label: 'Name', valueHtml: instance.name});\r\n      labelValues.push({label: 'Version', valueHtml: instance.version});\r\n      labelValues.push({label: 'Status', valueHtml: instance.status});\r\n      labelValues.push({label: 'Description', valueHtml: instance.description});\r\n      labelValues.push({label: 'Service endpoint', valueHtml: instance.endpointUri});\r\n    }\r\n    return labelValues;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/org-service-registry/shared/services/sr-view-model.service.ts","import {Component, ViewEncapsulation, OnInit} from '@angular/core';\r\nimport {MCNotificationsService, MCNotificationType} from \"../../../../shared/mc-notifications.service\";\r\nimport {NavigationHelperService, queryKeys} from \"../../../../shared/navigation-helper.service\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {CertificateEntityType} from \"../../services/certificate-helper.service\";\r\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\r\nimport {CertificatesService} from \"../../../../backend-api/identity-registry/services/certificates.service\";\r\nimport {PemCertificate} from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\r\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'certificate-issue-new',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./certificate-issue-new.html'),\r\n  styles: []\r\n})\r\nexport class CertificateIssueNewComponent implements OnInit {\r\n  public entityType: CertificateEntityType;\r\n  public entityMrn: string;\r\n  public entityTitle: string;\r\n  public isLoading: boolean;\r\n  public pemCertificate: PemCertificate;\r\n\r\n  public labelValues:Array<LabelValueModel>;\r\n\r\n  constructor(private fileHelper: FileHelperService, private certificateService: CertificatesService, private route:ActivatedRoute, private navigationHelper: NavigationHelperService, private notificationService: MCNotificationsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isLoading = false;\r\n    let entityType = this.route.snapshot.queryParams[queryKeys.ENTITY_TYPE];\r\n    let entityMrn = this.route.snapshot.queryParams[queryKeys.ENTITY_MRN];\r\n    let entityTitle= this.route.snapshot.queryParams[queryKeys.ENTITY_TITLE];\r\n    if (entityType == null || !entityMrn || !entityTitle) {\r\n      this.notificationService.generateNotification(\"Error\", \"Unresolved state when trying to issue new certificate\", MCNotificationType.Error);\r\n      this.navigationHelper.takeMeHome();\r\n    }\r\n    this.entityMrn = entityMrn;\r\n    this.entityTitle = entityTitle;\r\n    this.entityType = +entityType; // +-conversion from string to int\r\n    this.generateLabelValues();\r\n  }\r\n\r\n  public zipAndDownload() {\r\n    this.fileHelper.downloadPemCertificate(this.pemCertificate, this.entityTitle);\r\n  }\r\n\r\n  public issueNew() {\r\n    this.isLoading = true;\r\n    this.certificateService.issueNewCertificate(this.entityType, this.entityMrn).subscribe(\r\n      pemCertificate => {\r\n        this.pemCertificate = pemCertificate;\r\n        this.isLoading = false;\r\n      },\r\n      err => {\r\n        this.isLoading = false;\r\n        this.notificationService.generateNotification('Error', 'Error when trying to issue new certificate', MCNotificationType.Error, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  public cancel() {\r\n    this.navigationHelper.cancelNavigateCertificates();\r\n  }\r\n\r\n  private generateLabelValues() {\r\n    this.labelValues = [];\r\n    this.labelValues.push({label: 'Name', valueHtml: this.entityTitle});\r\n    this.labelValues.push({label: 'MRN', valueHtml: this.entityMrn});\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12\\\">\\r\\n    <ba-card title=\\\"Issue new certificate\\\" baCardClass=\\\"with-scroll table-panel\\\">\\r\\n      <!-- Before issue -->\\r\\n      <div *ngIf=\\\"entityType != null && !pemCertificate && !isLoading\\\">\\r\\n        <h5>Issuing a new certificate for:</h5>\\r\\n        <mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-danger btn-raised\\\" (click)=\\\"issueNew()\\\">Issue Certificate</button>\\r\\n          </li>\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n\\r\\n      <sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\r\\n\\r\\n      <!-- After issue and success -->\\r\\n      <div *ngIf=\\\"pemCertificate\\\">\\r\\n        Certificate issued with success\\r\\n        <ul *ngIf=\\\"entityType != null\\\" class=\\\"btn-list clearfix\\\">\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised\\\" (click)=\\\"zipAndDownload()\\\">Download certificate</button>\\r\\n          </li>\\r\\n          <li>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-raised\\\" (click)=\\\"cancel()\\\">OK</button>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n    </ba-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module id = ./src/app/pages/shared/components/certificate-issue-new/certificate-issue-new.html\n// module chunks = 0 1 2 3","import {Component, ViewEncapsulation, Input, HostListener, OnChanges} from '@angular/core';\r\nimport {Certificate} from \"../../../../backend-api/identity-registry/autogen/model/Certificate\";\r\nimport {CertificateEntityType, CertificateHelperService} from \"../../services/certificate-helper.service\";\r\nimport {layoutSizes, DATE_FORMAT} from \"../../../../theme/theme.constants\";\r\nimport {AuthService} from \"../../../../authentication/services/auth.service\";\r\nimport {CertificateViewModel} from \"../../view-models/CertificateViewModel\";\r\nimport {NavigationHelperService} from \"../../../../shared/navigation-helper.service\";\r\nimport {MCNotificationType, MCNotificationsService} from \"../../../../shared/mc-notifications.service\";\r\nimport {FileHelperService} from \"../../../../shared/file-helper.service\";\r\nimport {PemCertificate} from \"../../../../backend-api/identity-registry/autogen/model/PemCertificate\";\r\n\r\n@Component({\r\n  selector: 'certificates-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./certificates-table.html'),\r\n  styles: [require('./certificates-table.scss')]\r\n})\r\nexport class CertificatesTableComponent implements OnChanges{\r\n  @Input() certificates: Array<Certificate>;\r\n  @Input() certificateEntityType: CertificateEntityType;\r\n  @Input() entityMrn: string;\r\n  @Input() isLoading: boolean;\r\n  @Input() certificateTitle: string;\r\n\r\n  public newCertificateTitle = \"Issue new Certificate\";\r\n  public certificateViewModels: Array<CertificateViewModel>;\r\n  public dateFormat = DATE_FORMAT;\r\n  public tableClass:string;\r\n  public onIssueCertificate: Function;\r\n\r\n  constructor(private fileHelper: FileHelperService, private navigationHelper: NavigationHelperService, private authService:AuthService, private certificateHelperService: CertificateHelperService, private notificationService: MCNotificationsService) {\r\n    this.calculateTableClass();\r\n    this.onIssueCertificate = this.issueCertificate.bind(this);\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.certificates) {\r\n      this.certificateViewModels = this.certificateHelperService.convertCertificatesToViewModels(this.certificates);\r\n      this.sortCertificates();\r\n    }\r\n  }\r\n\r\n  public hasData():boolean {\r\n\t  return this.certificateViewModels && this.certificateViewModels.length > 0;\r\n  }\r\n\r\n  private sortCertificates() {\r\n    // We are sorting with longest due date on top\r\n    this.certificateViewModels.sort((obj1: CertificateViewModel, obj2: CertificateViewModel) => {\r\n      var obj1Time:number;\r\n      var obj2Time:number;\r\n      // Why is this needed??? for some reason sometimes the obj.end is a number and not a Date???\r\n      if (typeof obj1.end === \"Date\") {\r\n        obj1Time = obj1.end.getTime();\r\n      } else {\r\n        obj1Time = obj1.end;\r\n      }\r\n      if (typeof obj2.end === \"Date\") {\r\n        obj2Time = obj2.end.getTime();\r\n      } else {\r\n        obj2Time = obj2.end;\r\n      }\r\n\r\n      if (obj1.revoked && obj2.revoked) {\r\n        return obj2Time - obj1Time;\r\n      }\r\n      if (obj1.revoked) {\r\n        return 1;\r\n      }\r\n      if (obj2.revoked) {\r\n        return -1;\r\n      }\r\n      return obj2Time - obj1Time;\r\n    });\r\n  }\r\n\r\n  public issueCertificate() {\r\n    this.navigationHelper.navigateToIssueNewCertificate(this.certificateEntityType, this.entityMrn, this.certificateTitle);\r\n  }\r\n\r\n  public isAdmin():boolean {\r\n    return this.authService.authState.isAdmin();\r\n  }\r\n\r\n  public revoke(certificate:Certificate) {\r\n    this.notificationService.generateNotification('Not Implemented', 'Revoke coming soon', MCNotificationType.Info);\r\n  }\r\n\r\n  public download(certificate:Certificate) {\r\n    let pemCertificate:PemCertificate = {certificate:certificate.certificate};\r\n    this.fileHelper.downloadPemCertificate(pemCertificate, this.certificateTitle);\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  public onWindowResize():void {\r\n    this.calculateTableClass();\r\n  }\r\n\r\n  private calculateTableClass():void {\r\n    this.tableClass = (this.isWindowToSmall()?'certificate-table-short':'certificate-table');\r\n  }\r\n\r\n  private isWindowToSmall():boolean {\r\n    return window.innerWidth <= layoutSizes.resWidthCollapseSidebar;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/certificates-table/certificates-table.component.ts","module.exports = \"<div *ngIf=\\\"!isLoading && hasData()\\\">\\r\\n  <table class=\\\"table table-bordered {{tableClass}}\\\">\\r\\n    <thead>\\r\\n      <tr class=\\\"black-muted-bg\\\">\\r\\n        <th class=\\\"\\\">Certificate</th>\\r\\n        <th class=\\\"nowrap\\\">Valid from</th>\\r\\n        <th class=\\\"nowrap\\\">Valid to</th>\\r\\n        <th class=\\\"table-buttons\\\"></th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let certificate of certificateViewModels; let i = index\\\">\\r\\n        <td class=\\\"\\\">{{'Certificate for ' + certificateTitle | truncate:50}}</td>\\r\\n        <td class=\\\"nowrap\\\">{{certificate.start | date:dateFormat}}</td>\\r\\n        <td class=\\\"nowrap\\\">{{certificate.end | date:dateFormat}}</td>\\r\\n        <td *ngIf=\\\"!certificate.revoked\\\" class=\\\"table-buttons\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-primary btn-raised btn-sm\\\" (click)=\\\"download(certificate)\\\">Download certificate</button>\\r\\n          <button type=\\\"button\\\" *ngIf=\\\"isAdmin()\\\" class=\\\"btn btn-danger btn-raised btn-sm\\\" (click)=\\\"revoke(certificate)\\\">Revoke certificate</button>\\r\\n        </td>\\r\\n        <td *ngIf=\\\"certificate.revoked\\\" class=\\\"table-buttons\\\">\\r\\n          <span class=\\\"red-text\\\">Revoked ({{certificate.revokeReasonText}})</span>\\r\\n        </td>\\r\\n      </tr>\\r\\n    </tbody>\\r\\n  </table>\\r\\n</div>\\r\\n<sk-fading-circle [isRunning]=\\\"isLoading\\\" ></sk-fading-circle>\\r\\n<div class=\\\"no-data\\\" *ngIf=\\\"!hasData() && !isLoading\\\">No data</div>\\r\\n<div *ngIf=\\\"!isLoading\\\">\\r\\n  <mc-create-button [title]=\\\"newCertificateTitle\\\" [onClick]=\\\"onIssueCertificate\\\"></mc-create-button>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.html\n// module chunks = 0 1 2 3","module.exports = \".table-buttons {\\n  width: 100%; }\\n  .table-buttons button {\\n    margin: 5px !important; }\\n\\n.certificate-table td {\\n  vertical-align: middle; }\\n\\n.certificate-table td:first-child {\\n  white-space: nowrap; }\\n\\n.certificate-table-short td {\\n  vertical-align: middle; }\\n\\n.certificate-table-short td:first-child {\\n  min-width: 200px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module id = ./src/app/pages/shared/components/certificates-table/certificates-table.scss\n// module chunks = 0 1 2 3","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\r\nimport {Design} from \"../../../../backend-api/service-registry/autogen/model/Design\";\r\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\r\n\r\n@Component({\r\n  selector: 'designs-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./designs-table.html'),\r\n  styles: []\r\n})\r\nexport class DesignsTableComponent implements OnChanges {\r\n  @Input() designs: Array<Design>;\r\n  @Input() isLoading: boolean;\r\n  @Input() onRowClick: (index:number) => void;\r\n  public tableHeaders: Array<TableHeader>;\r\n  public tableRows: Array<TableRow>;\r\n  constructor() {\r\n  }\r\n  ngOnInit() {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.designs) {\r\n      this.generateHeadersAndRows();\r\n    }\r\n  }\r\n  private generateHeadersAndRows() {\r\n    var tableHeaders: Array<TableHeader> = [];\r\n    var tableRows: Array<TableRow> = [];\r\n\r\n    var tableHeader: TableHeader = {title:'Name', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Version', class:'nowrap align-center'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Status', class:'nowrap'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Description', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    for (let design of this.designs) {\r\n      var cells:Array<TableCell> = [];\r\n\r\n      var tableCell: TableCell = {valueHtml:design.name, class:'', truncateNumber:50};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:design.version, class:'nowrap align-center', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:design.status, class:'nowrap', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:design.description, class:'table-description', truncateNumber:250};\r\n      cells.push(tableCell);\r\n\r\n      let tableRow: TableRow = {cells: cells};\r\n      tableRows.push(tableRow);\r\n    }\r\n\r\n    this.tableHeaders = tableHeaders;\r\n    this.tableRows = tableRows;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/designs-table/designs-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/designs-table/designs-table.html\n// module id = ./src/app/pages/shared/components/designs-table/designs-table.html\n// module chunks = 0 1 2 3","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\r\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\r\nimport {Instance} from \"../../../../backend-api/service-registry/autogen/model/Instance\";\r\n\r\n@Component({\r\n  selector: 'instances-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./instances-table.html'),\r\n  styles: []\r\n})\r\nexport class InstancesTableComponent implements OnChanges {\r\n  @Input() instances: Array<Instance>;\r\n  @Input() isLoading: boolean;\r\n  @Input() onRowClick: (index:number) => void;\r\n  public tableHeaders: Array<TableHeader>;\r\n  public tableRows: Array<TableRow>;\r\n  constructor() {\r\n  }\r\n  ngOnInit() {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.instances) {\r\n      this.generateHeadersAndRows();\r\n    }\r\n  }\r\n  private generateHeadersAndRows() {\r\n    var tableHeaders: Array<TableHeader> = [];\r\n    var tableRows: Array<TableRow> = [];\r\n\r\n    var tableHeader: TableHeader = {title:'Name', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Version', class:'nowrap align-center'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Status', class:'nowrap'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Description', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    for (let instance of this.instances) {\r\n      var cells:Array<TableCell> = [];\r\n\r\n      var tableCell: TableCell = {valueHtml:instance.name, class:'', truncateNumber:50};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:instance.version, class:'nowrap align-center', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:instance.status, class:'nowrap', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:instance.description, class:'table-description', truncateNumber:250};\r\n      cells.push(tableCell);\r\n\r\n      let tableRow: TableRow = {cells: cells};\r\n      tableRows.push(tableRow);\r\n    }\r\n\r\n    this.tableHeaders = tableHeaders;\r\n    this.tableRows = tableRows;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/instances-table/instances-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/instances-table/instances-table.html\n// module id = ./src/app/pages/shared/components/instances-table/instances-table.html\n// module chunks = 0 1 2 3","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\r\nimport {LabelValueModel} from \"../../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\nimport {Organization} from \"../../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {OrganizationViewModelService} from \"../../services/organization-view-model.service\";\r\n\r\n@Component({\r\n  selector: 'organization-details-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./organization-details-table.html'),\r\n  styles: []\r\n})\r\nexport class OrganizationDetailsTableComponent implements OnChanges {\r\n  private labelValues:Array<LabelValueModel>;\r\n  @Input() isLoading:boolean;\r\n  @Input() organization: Organization;\r\n  constructor(private orgViewModelService: OrganizationViewModelService) {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.organization) {\r\n      this.labelValues = this.orgViewModelService.generateLabelValuesForOrganization(this.organization);\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/organizaton-details-table/organization-details-table.component.ts","module.exports = \"<mc-label-value-table [isLoading]=\\\"isLoading\\\" [labelValues]=\\\"labelValues\\\"></mc-label-value-table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module id = ./src/app/pages/shared/components/organizaton-details-table/organization-details-table.html\n// module chunks = 0 1 2 3","import {Component, ViewEncapsulation, Input, OnChanges} from '@angular/core';\r\nimport {Specification} from \"../../../../backend-api/service-registry/autogen/model/Specification\";\r\nimport {TableHeader, TableRow, TableCell} from \"../../../../theme/components/mcTable/mcTable.component\";\r\n\r\n@Component({\r\n  selector: 'specifications-table',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: require('./specifications-table.html'),\r\n  styles: []\r\n})\r\nexport class SpecificationsTableComponent implements OnChanges {\r\n  @Input() specifications: Array<Specification>;\r\n  @Input() isLoading: boolean;\r\n  @Input() onRowClick: (index:number) => void;\r\n  public tableHeaders: Array<TableHeader>;\r\n  public tableRows: Array<TableRow>;\r\n  constructor() {\r\n  }\r\n  ngOnInit() {\r\n  }\r\n  ngOnChanges() {\r\n    if (this.specifications) {\r\n      this.generateHeadersAndRows();\r\n    }\r\n  }\r\n  private generateHeadersAndRows() {\r\n    var tableHeaders: Array<TableHeader> = [];\r\n    var tableRows: Array<TableRow> = [];\r\n\r\n    var tableHeader: TableHeader = {title:'Name', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Version', class:'nowrap align-center'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Status', class:'nowrap'};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    tableHeader = {title:'Description', class:''};\r\n    tableHeaders.push(tableHeader);\r\n\r\n    for (let specification of this.specifications) {\r\n      var cells:Array<TableCell> = [];\r\n\r\n      var tableCell: TableCell = {valueHtml:specification.name, class:'', truncateNumber:50};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:specification.version, class:'nowrap align-center', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:specification.status, class:'nowrap', truncateNumber:0};\r\n      cells.push(tableCell);\r\n\r\n      tableCell = {valueHtml:specification.description, class:'table-description', truncateNumber:250};\r\n      cells.push(tableCell);\r\n\r\n      let tableRow: TableRow = {cells: cells};\r\n      tableRows.push(tableRow);\r\n    }\r\n\r\n    this.tableHeaders = tableHeaders;\r\n    this.tableRows = tableRows;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/components/specifications-table/specifications-table.component.ts","module.exports = \"<mc-table [tableHeaders]=\\\"tableHeaders\\\" [tableRows]=\\\"tableRows\\\" [isLoading]=\\\"isLoading\\\" [onRowClick]=\\\"onRowClick\\\"></mc-table>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module id = ./src/app/pages/shared/components/specifications-table/specifications-table.html\n// module chunks = 0 1 2 3","import {Injectable, OnInit} from '@angular/core';\r\nimport {Organization} from \"../../../backend-api/identity-registry/autogen/model/Organization\";\r\nimport {LabelValueModel} from \"../../../theme/components/mcLabelValueTable/mcLabelValueTable.component\";\r\n\r\n@Injectable()\r\nexport class OrganizationViewModelService implements OnInit {\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n  public generateLabelValuesForOrganization(organization:Organization):Array<LabelValueModel>  {\r\n    var labelValues:Array<LabelValueModel> = undefined;\r\n    if (organization) {\r\n      labelValues = [];\r\n      labelValues.push({label: 'MRN', valueHtml: organization.mrn});\r\n      labelValues.push({label: 'Address', valueHtml: organization.address});\r\n      labelValues.push({label: 'Country', valueHtml: organization.country});\r\n      if (organization.email) {\r\n        labelValues.push({label: 'Email', valueHtml: \"<a href='mailto:\" + organization.email + \"'>\" + organization.email + \"</a>\"});\r\n      }\r\n      if (organization.url) {\r\n        labelValues.push({label: 'Website', valueHtml: \"<a href='\" + organization.url + \"' target='_blank'>\" + organization.url + \"</a>\"});\r\n      }\r\n    }\r\n    return labelValues;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/services/organization-view-model.service.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport {DesignsTableComponent} from \"./components/designs-table/designs-table.component\";\r\nimport {SpecificationsTableComponent} from \"./components/specifications-table/specifications-table.component\";\r\nimport {NgaModule} from \"../../theme/nga.module\";\r\nimport {InstancesTableComponent} from \"./components/instances-table/instances-table.component\";\r\nimport {SrViewModelService} from \"../org-service-registry/shared/services/sr-view-model.service\";\r\nimport {CertificatesTableComponent} from \"./components/certificates-table/certificates-table.component\";\r\nimport {CertificateHelperService} from \"./services/certificate-helper.service\";\r\nimport {OrganizationDetailsTableComponent} from \"./components/organizaton-details-table/organization-details-table.component\";\r\nimport {OrganizationViewModelService} from \"./services/organization-view-model.service\";\r\nimport {CertificateIssueNewComponent} from \"./components/certificate-issue-new/certificate-issue-new.component\";\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgaModule\r\n  ],\r\n  declarations: [\r\n    DesignsTableComponent,\r\n    InstancesTableComponent,\r\n    SpecificationsTableComponent,\r\n    CertificatesTableComponent,\r\n    OrganizationDetailsTableComponent,\r\n    CertificateIssueNewComponent\r\n  ],\r\n  exports: [\r\n    OrganizationDetailsTableComponent,\r\n    DesignsTableComponent,\r\n    InstancesTableComponent,\r\n    SpecificationsTableComponent,\r\n    CertificatesTableComponent,\r\n    CertificateIssueNewComponent\r\n  ],\r\n  providers: [\r\n    SrViewModelService,\r\n    CertificateHelperService,\r\n    OrganizationViewModelService\r\n  ]\r\n})\r\nexport class SharedModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/pages/shared/shared.module.ts","export interface EnumKeyValue {\r\n\tkey:any;\r\n\tvalue:any;\r\n}\r\n\r\n\r\nexport class EnumsHelper {\r\n\tpublic static getKeysAndValuesFromEnum(myEnum:any):Array<EnumKeyValue> {\r\n\t\tlet enumKeysAndValues:Array<EnumKeyValue> = [];\r\n\t\tlet keysAndValues:Array<any> = [];\r\n\t\tfor (let enumValue in myEnum) {\r\n\t\t\tlet enumsKeysAndValuesLength = keysAndValues.length;\r\n\r\n\t\t\tif (enumsKeysAndValuesLength === 0) {\r\n\t\t\t\tkeysAndValues.push([enumValue, myEnum[enumValue]]);\r\n\t\t\t\tenumKeysAndValues.push({key:enumValue, value: myEnum[enumValue]});\r\n\t\t\t} else {\r\n\t\t\t\tif (keysAndValues[enumsKeysAndValuesLength - 1][1] !== enumValue) {\r\n\t\t\t\t\tkeysAndValues.push([enumValue, myEnum[enumValue]]);\r\n\t\t\t\t\tenumKeysAndValues.push({key:enumValue, value: myEnum[enumValue]});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn enumKeysAndValues;\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/shared/enums-helper.ts"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAEA;;;;;;;;;ACxBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAEA;AAwBA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;;;;;;;;;;AC1DA;AAEA;AAEA;AACA;AACA;AAQA;AAOA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA0CA;;AAAA;AAzCA;;;;;;;;ACdA;;;;;;;;;ACAA;AACA;AAEA;AACA;AAGA;AACA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAvEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAoEA;;AAAA;AAnEA;;;;;;;;AChBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AAUA;AAUA;AAAA;AAAA;AAAA;AAAA;AARA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AArEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAkEA;;AAAA;AAjEA;;;;;;;;ACfA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AACA;AAfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACvCA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AACA;AAeA;AAAA;AACA;AAbA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;ACvBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AClBA;AACA;AACA;AACA;AAGA;AACA;AAQA;AAQA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgDA;;AAAA;AA/CA;;;;;;;;ACfA;;;;;;;;;ACAA;AACA;AAEA;AACA;AAEA;AAEA;AAQA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAvEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAoEA;;AAAA;AAnEA;;;;;;;;AChBA;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AASA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApIA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAgIA;;AAAA;AA/HA;;;;;;;;ACtBA;;;;;;;;;ACAA;AAMA;AACA;AACA;AANA;AAAA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;AAAA;AACA;AAjBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;AACA;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACtCA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA5FA;;;;;;;;;;ACVA;AAOA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAAA;;AAAA;AAgDA;AAAA;AA/CA;;;;;;;;;;ACPA;AACA;AACA;AACA;AAGA;AAGA;AASA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAuDA;;AAAA;AAtDA;;;;;;;;AClBA;;;;;;;;;ACAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AASA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAtFA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAuEA;AAAA;;;;AAAA;AAlFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyFA;;AAAA;AAxFA;;;;;;;;ACjBA;;;;;;;ACAA;;;;;;;;;ACAA;AAUA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsDA;AAAA;AArDA;;;;;;;;ACVA;;;;;;;;;ACAA;AAUA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsDA;AAAA;AArDA;;;;;;;;ACVA;;;;;;;;;ACAA;AAEA;AACA;AAQA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAaA;;AAAA;AAZA;;;;;;;;ACXA;;;;;;;;;ACAA;AAUA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AATA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAsDA;AAAA;AArDA;;;;;;;;ACVA;;;;;;;;;ACAA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;;AAAA;AAwBA;AAAA;AAvBA;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BA;AAAA;AACA;AA5BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AAAA;AADA;;;;;;;;;;ACnCA;AAAA;AAmBA;AAlBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnBA;;;;;","sourceRoot":""}